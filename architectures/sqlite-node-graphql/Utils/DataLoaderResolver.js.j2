// {{ warning }}

{% import 'resolver.j2h' as resolve %}
{% import 'loader.j2h' as loader %}
{% import 'data.j2h' as data %}

const logger = require('./logger');
const util = require('util');

class DataLoaderResolver {
    constructor(loaders) {
        this.loaders = loaders;
    }
{% for entity in schema.get_entities() %}
    async {{ resolve.entity(entity) }}(args) {
        return this.loaders.{{ loader.entity(entity) }}.load(args.id);
    }

    async {{ resolve.entities(entity) }}(args) {
        return this.loaders.{{ loader.entities(entity) }}.load(args);
    }

{%     for reference in entity.get_references() %}
    async {{ resolve.reference_for_entity(entity, reference) }}(entity) {
        return this.loaders.{{ loader.reference(reference) }}.load(entity.{{ reference.get_name() }})
    }
{%     endfor %}

{%     for union in entity.get_unions() %}
    async {{ resolve.union_for_entity(entity, union) }}(entity) {
        switch (entity.{{ union.get_name() }}_type) {
{%         for reference in union.get_references() %}
            case "{{ reference.get_name() }}":
                return this.loaders.{{ loader.reference(reference) }}.load(entity.{{ union.get_name() }});
{%         endfor %}
        }
    }
{%     endfor %}

{%     for referrer in entity.get_referrers() %}
    async {{ resolve.referrer_for_entity(entity, referrer) }}(entity, args) {
        return this.loaders.{{ loader.referrer(referrer) }}.load(entity.id, args)
    }
{%     endfor %}

{%     for association in entity.get_associations() %}
    async {{ resolve.association_for_entity(entity, association) }}(entity, args) {
        const associations = await this.loaders.{{ loader.association_for_entity(entity, association) }}.load(entity.id, args);
        return associations.map(row => this.loaders.{{ loader.other_entity(entity, association) }}.load(row));
    }
{%     endfor %}
    async {{ resolve.create_entity(entity) }}(args) {
        return this.loaders.data.{{ data.create_entity(entity) }}(args);
    }

    async {{ resolve.update_entity(entity) }}(id, args) {
        return this.loaders.data.{{ data.update_entity(entity) }}(id, args);
    }

    async {{ resolve.delete_entity(entity) }}(id) {
        return this.loaders.data.{{ data.delete_entity(entity) }}(id);
    }

{% endfor %}
{% for association in schema.get_associations() %}
    async {{ resolve.create_association(association) }}(args) {
        return this.loaders.data.{{ data.create_association(association) }}(args);
    }

    async {{ resolve.delete_association(association) }}(args) {
        return this.loaders.data.{{ data.delete_association(association) }}(args);
    }
{% endfor %}
}

module.exports = DataLoaderResolver;