{#
 #  MetaData - API Generator.
 #  Copyright (C) 2022  Bill Hails
 #
 #  This program is free software: you can redistribute it and/or modify
 #  it under the terms of the GNU General Public License as published by
 #  the Free Software Foundation, either version 3 of the License, or
 #  (at your option) any later version.
 #
 #  This program is distributed in the hope that it will be useful,
 #  but WITHOUT ANY WARRANTY; without even the implied warranty of
 #  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 #  GNU General Public License for more details.
 #
 #  You should have received a copy of the GNU General Public License
 #  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 #}
// {{ warning }}

{% import 'macros/resolver.j2h' as resolve %}
{% import 'macros/schema.j2h' as arguments %}

const logger = require('./logger');
const util = require('util');


class AuthFilter {
    constructor(resolver) {
        this.resolver = resolver;
    }

    clearAll() {
        this.resolver.clearAll();
    }

    mapConnection(connection, transform) {
        connection.edges.forEach(edge => edge.node = transform(edge.node));
    }

{%- for entity in schema.get_entities() %}

{%-     for field in entity.get_fields() %}
{%-         if field.is_auth_visibility('redacted') %}
    {{ resolve.redact_field_for_entity(entity, field) }}(model, req) {
        if (!req.user || req.user.sub != model.{{ arguments.field_label(entity.get_auth_owner_reference()) }}) {
            model.{{ arguments.field_label(field) }} = null;
        }
        return model;
    }
{%-         endif %}
{%-     endfor %}

    async {{ resolve.entity(entity) }}(source, args, req, info) {
        return this.resolver.{{ resolve.entity(entity) }}(source, args, req, info).then(
            model => {
{%-     for field in entity.get_fields() %}
{%-         if field.is_auth_visibility('redacted') %}
                this.{{ resolve.redact_field_for_entity(entity, field) }}(model, req);
{%-         endif %}
{%-     endfor %}
                return model;
            }
        )
{%-       if entity.is_auth_role("token") -%}
            .then(model => req.user && req.user.sub == model.{{ arguments.field_label(entity.get_auth_owner_reference()) }} ? model : null)
{%-      endif -%}
        ;
    }

    async {{ resolve.entities(entity) }}(source, args, req, info) {
        const connection = await this.resolver.{{ resolve.entities(entity) }}(source, args, req, info);
{%-     for field in entity.get_fields() %}
{%-         if field.is_auth_visibility('redacted') %}
        this.mapConnection(connection, model => this.{{ resolve.redact_field_for_entity(entity, field) }}(model, req));
{%-         endif %}
{%-     endfor %}
{%-       if not entity.is_auth_visibility("visible") -%}
        this.mapConnection(connection, model => (req.user && req.user.sub == model.{{ arguments.field_label(entity.get_auth_owner_reference()) }}) ? model : null );
{%      endif -%}
        logger.debug('{{ resolve.entities(entity) }} returning', {connection});
        return connection;
    }

{%-     for reference in entity.get_references() %}

    async {{ resolve.reference_for_entity(entity, reference) }}(entity, args, req, info) {
        return this.resolver.{{ resolve.reference_for_entity(entity, reference) }}(entity, args, req, info);
    }

{%-     endfor %}

{%-     for union in entity.get_unions() %}

    async {{ resolve.union_for_entity(entity, union) }}(entity, args, req, info) {
        return this.resolver.{{ resolve.union_for_entity(entity, union) }}(entity, args, req, info);
    }

{%-     endfor %}

{%-     for referrer in entity.get_referrers() %}

    async {{ resolve.referrer_for_entity(entity, referrer) }}(entity, args, req, info) {
        const models = await  this.resolver.{{ resolve.referrer_for_entity(entity, referrer) }}(entity, args, req, info);
{%-        if not referrer.get_entity().is_auth_visibility("visible") -%}
        logger.debug('AuthFilter.{{ resolve.referrer_for_entity(entity, referrer) }} got models', {models});
        this.mapConnection(models, model => (req.user && req.user.sub == model.{{ arguments.field_label(referrer.get_entity().get_auth_owner_reference()) }}) ? model : null);
{%-        endif %}
        return models;
    }

{%-     endfor %}

{%-     for association in entity.get_associations() %}

    async {{ resolve.association_for_entity(entity, association) }}(entity, args, req, info) {
        return this.resolver.{{ resolve.association_for_entity(entity, association) }}(entity, args, req, info);
    }

{%-     endfor %}

    async {{ resolve.create_entity(entity) }}(source, args, req, info) {
        logger.debug('AuthFilter.{{ resolve.create_entity(entity) }}', {args});
        if (!req.user) {
            return null;
        }
{%-     if entity.has_auth_owner() %}
        args.input.{{ arguments.field_label(entity.get_auth_owner_reference()) }} = req.user.sub;
{%-     endif %}
        return this.resolver.{{ resolve.create_entity(entity) }}(source, args, req, info);
    }

    async {{ resolve.update_entity(entity) }}(source, args, req, info) {
        if (!req.user) {
            return null;
        }
{%-     if entity.get_auth_owner_reference() %}
        const model = await this.resolver.{{ resolve.entity(entity) }}(source, args, req, info);
        if (model.{{ arguments.field_label(entity.get_auth_owner_reference()) }} != req.user.sub) {
            return null;
        }
{%-     endif %}
        return this.resolver.{{ resolve.update_entity(entity) }}(source, args, req, info);
    }

    async {{ resolve.delete_entity(entity) }}(source, args, req, info) {
        if (!req.user) {
            return { status: false };
        }

        return this.resolver.{{ resolve.delete_entity(entity) }}(source, args, req, info);
    }

{%- endfor %}

{%- for association in schema.get_associations() %}

    async {{ resolve.create_association(association) }}(source, args, req, info) {
        return this.resolver.{{ resolve.create_association(association) }}(source, args, req, info);
    }

    async {{ resolve.delete_association(association) }}(source, args, req) {
        return this.resolver.{{ resolve.delete_association(association) }}(source, args, req, info);
    }

{%- endfor %}
}

module.exports = AuthFilter;