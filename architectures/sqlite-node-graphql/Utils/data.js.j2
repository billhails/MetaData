{#-
 #  MetaData - API Generator.
 #  Copyright (C) 2022  Bill Hails
 #
 #  This program is free software: you can redistribute it and/or modify
 #  it under the terms of the GNU General Public License as published by
 #  the Free Software Foundation, either version 3 of the License, or
 #  (at your option) any later version.
 #
 #  This program is distributed in the hope that it will be useful,
 #  but WITHOUT ANY WARRANTY; without even the implied warranty of
 #  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 #  GNU General Public License for more details.
 #
 #  You should have received a copy of the GNU General Public License
 #  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 -#}
// {{ warning }}
const sqlite3 = require('sqlite3').verbose();
const { open: openSqlite } = require('sqlite');
const util = require('util');
const Model = require('../Model');
const logger = require('./logger');

{%- import 'macros/data.j2h' as data %}
{%- import 'macros/gql.j2h' as gql %}
{%- import 'macros/database.j2h' as database %}
{%- import 'macros/model.j2h' as model %}

class Data {

    static instance = null;

    constructor(db) {
        this.db = db;
        this.db.run('PRAGMA foreign_keys = ON');
    }

    async get(query, params=[]) {
        logger.debug(`get: ${query} ${params}`);
        return this.db.get(query, params).catch(error => {
            logger.error(`${error} while executing ${query}, ${util.inspect(params)}`);
            throw(error);
        });
    }

    async run(query, params=[]) {
        logger.debug(`run: ${query} ${params}`);
        return this.db.run(query, params).catch(error => {
            logger.error(`${error} while executing ${query}, ${util.inspect(params)}`);
            throw(error);
        });
    }

    async all(query, params=[]) {
        logger.debug(`all: ${query} ${params}`);
        return this.db.all(query, params).catch(error => {
            logger.error(`${error} while executing ${query}, ${util.inspect(params)}`);
            throw(error);
        });
    }

{%- macro entity_fields(entity) %}
{{database.name(entity) }}.id AS id,
{{database.name(entity) }}.date_created AS dateCreated,
{{database.name(entity) }}.date_last_updated AS dateLastUpdated
{%-     for field in entity.get_fields() %}
{{- ',' }}
{{database.name(entity) }}.{{ database.name(field) }} AS {{ gql.field_label(field) }}
{%-     endfor %}
{%-     for reference in entity.get_references() %}
{{- ',' }}
{{database.name(entity) }}.{{ database.name(reference) }} AS {{ gql.field_label(reference) }}
{%-     endfor %}
{%-     for union in entity.get_unions() %}
{{- ',' }}
{{ database.name(entity) }}.{{ database.name(union) }} AS {{ gql.field_label(union) }},
{{ database.name(entity) }}.{{ database.type_name(union) }} AS {{ gql.field_type(union) }}
{%-     endfor %}
{%- endmacro %}

{%- if schema.is_auth_enabled() %}
{%-     set auth_token_entity = schema.get_auth_token_entity() %}
{%-     set auth_token_field = auth_token_entity.get_auth_token_field() %}
{%-     set auth_owner_reference = auth_token_entity.get_auth_owner_reference() %}

{%-     set auth_token_entity_label = database.name(auth_token_entity) %}
{%-     set auth_token_field_label = database.name(auth_token_field) %}
{%-     set auth_owner_reference_label = database.name(auth_owner_reference) %}

{%-     set auth_owner = schema.get_auth_owner_entity() %}
{%-     set auth_role_association = schema.get_auth_role_association() %}

    async getAuthRolesForOwner(id) {
        // because auth is stitched in from a known xml source we can dodge some of the CG
        // good idea or just lazy?
        return this.all(`
            SELECT roles.label AS role
              FROM owner_roles
              JOIN roles
                ON roles.id = owner_roles.roles_rhs_id
             WHERE owner_roles.{{ database.lhs(auth_role_association) }} = ?
        `, [id]);
    }
    /**
     * check if refresh token exists
     * @param {string} token
     * @return {bool}
     */
    async checkRefreshTokenExists(token) {
        const row = await this.get(`
                SELECT count(*) AS c
                  FROM {{ auth_token_entity_label }}
                 WHERE {{ auth_token_field_label }} = ?
            `,
            [token]
        );
        return parseInt(row.c) > 0;
    }

    /**
     * save a refresh token
     *
     * @param {string} token
     */
    async saveRefreshToken(token, owner) {
        const model = new Model.{{ model.name(auth_token_entity) }}(
            {
                {{ auth_token_field_label }}: token,
                {{ auth_owner_reference_label }}: owner
            }
        );
        return this.run(`
            INSERT OR IGNORE INTO {{ auth_token_entity_label }}(
                                      id,
                                      date_created,
                                      date_last_updated,
                                      {{ auth_token_field_label }},
                                      {{ auth_owner_reference_label }}
                                  )
                           VALUES (?, ?, ?, ?, ?)
            `, [model.id, model.dateCreated, model.dateLastUpdated, model.{{ auth_token_field_label }}, model.{{ auth_owner_reference_label }}]
        );
    }

    /**
     * delete a refresh token
     *
     * @param {string} token
     */
    async deleteRefreshToken(token) {
        return this.run(
            `DELETE FROM refresh_tokens WHERE token = ?`,
            [token]
        );
    }

{%- endif %}

{%- for entity in schema.get_entities() %}

    /**
     * fetch entity
     *
     * @param {String} id
     * @returns {Model.{{ model.name(entity) }}}
     */
    async {{ data.get_entity(entity) }}(id) {
        return this.get(`
            SELECT {{ entity_fields(entity) }}
              FROM {{ database.name(entity) }}
             WHERE id = ?
            `, [id])
            .then(row => row ? new Model.{{ model.name(entity) }}(row) : null);
    }

{%-     for field in entity.get_fields() -%}
{%-         if field.is_unique() %}

    /**
     * fetch auth entity {{ entity.get_name() }} by {{ database.name(field) }}
     *
     * @param {String} {{ gql.field_label(field) }}
     * @returns {Model.{{ model.name(entity) }}}
     */
    async {{ data.get_entity_by_field(entity, field) }}(id) {
        return this.get(`
                SELECT {{ entity_fields(entity) }}
                  FROM {{ database.name(entity) }}
                 WHERE {{ database.name(field) }} = ?
            `, [id])
            .then(row => row ? new Model.{{ model.name(entity) }}(row) : null);
    }

{%-         endif %}
{%-     endfor %}

    /**
     * batch fetch entities for loader
     *
     * @param {[String]} ids
     * @returns {[Model.{{ model.name(entity) }}]}
     */
    async {{ data.batch_get_entity(entity) }}(ids) {
        const rows = await this.all(
            `SELECT {{ entity_fields(entity) }}
               FROM {{ database.name(entity) }}
              WHERE id IN (${ Array(ids.length).fill('?').join(', ') })`,
            ids
        ).then(rows => rows.reduce((acc, row) => ({ ...acc, [row.id]: row }), {}));
        return ids.map(id => rows[id] ? new Model.{{ model.name(entity) }}(rows[id]) : null);
    }

    /**
     * fetch a page of entities
     *
     * @param {object} args
     * @returns {[Model.{{ model.name(entity) }}]}
     */
    async {{ data.page_get_entity(entity) }}(args) {
        const first = args.first || 20;
        const after = args.after || '';
        return this.all(
            `SELECT {{ entity_fields(entity) }}
               FROM {{ database.name(entity) }}
              WHERE id > ?
           ORDER BY id
              LIMIT ?
            `,
            [after, first]
        ).then(rows => rows.map(row => new Model.{{ model.name(entity) }}(row)));
    }

    /**
     * count all entities
     */
    async {{ data.count_entities(entity) }}(args) {
        return this.get(`
            SELECT count(*) AS count
              FROM {{ database.name(entity) }}
        `);
    }

{%-     for union in entity.get_unions() %}

    /**
     * validate that an entry in the appropriate table exists
     *
     * @param {string} id
     * @param {string} type
     * @throws {Error}
     */
    async {{ data.validate_union(entity, union) }}(id, type) {
        let table;
        switch (type) {
{%-        for reference in union.get_references() %}
            case "{{ database.name(reference) }}":
                table = "{{ database.name(reference.get_referenced()) }}";
                break;
{%-        endfor %}
        }
        const row = await this.get(`
                SELECT count(*) AS count
                  FROM ${table}
                 WHERE id = ?
            `,
            [id]
        );

        if (parseInt(row.count) != 1) {
            throw new Error(`union {{ database.name(entity) }}.{{ database.name(union) }} reference failed, no ${type} with id ${id}`);
        }
    }
{%-     endfor %}{# unions #}

    /**
     * insert entity
     *
     * @param {object} args
     * @returns {Model.{{ model.name(entity) }}}
     */
    async {{ data.create_entity(entity) }}(args) {
        logger.debug('data.{{ data.create_entity(entity) }}', {args});
        const model = new Model.{{ model.name(entity) }}(args);
{%-     for union in entity.get_unions() %}
        await this.{{ data.validate_union(entity, union) }}(model.{{ gql.field_label(union) }}, model.{{ gql.field_type(union) }});
{%-     endfor %}
        const sql = `
        INSERT INTO {{ database.name(entity) }}(
          id,
          date_created,
          date_last_updated
{%-         for field in entity.get_fields() %}, {{ database.name(field) }}{% endfor %}
{%-         for reference in entity.get_references() %}, {{ database.name(reference) }}{% endfor %}
{%-         for union in entity.get_unions() %}, {{ database.name(union) }}, {{ database.type_name(union) }}{% endfor %}
        )
        VALUES (?, ?, ?{{ ', ?' * ((entity.get_fields()|length) + (entity.get_references()|length) + 2*(entity.get_unions()|length)) }})
        `;
        const params = [
           model.id,
           model.dateCreated,
           model.dateLastUpdated
{%-         for field in entity.get_fields() %}, model.{{ gql.field_label(field) }}{% endfor %}
{%-         for reference in entity.get_references() %}, model.{{ gql.field_label(reference) }}{% endfor %}
{%-         for union in entity.get_unions() %}, model.{{ gql.field_label(union) }}, model.{{ gql.field_type(union) }}{% endfor %}
        ]
        await this.run(sql, params);
        return model;
    }

    /**
     * update entity
     *
     * @param {string} id
     * @param {object} args
     * @returns {Model.{{ model.name(entity) }}}
     */
    async {{ data.update_entity(entity) }}(id, args) {
        const model = new Model.{{ model.name(entity) }}({id, ...args});
{%-     for union in entity.get_unions() %}
        if ("{{ gql.field_label(union) }}" in model) {
            await this.{{ data.validate_union(entity, union) }}(model.{{ gql.field_label(union) }}, model.{{ gql.field_type(union) }});
        }
{%-     endfor %}

        const fields = [];
        const params = [];

        fields.push('date_last_updated = ?');
        params.push((new Date()).toISOString());

{%-     for field in entity.get_fields() %}

        if ('{{ gql.field_label(field) }}' in args) {
            fields.push("{{ database.name(field) }} = ?");
            params.push(model.{{ gql.field_label(field) }});
        }
{%-     endfor %}
{%-     for reference in entity.get_references() %}
{%-        if not reference.is_auth_role('owner') %}{# can not change owner #}
        if ('{{ gql.field_label(reference) }}' in args) {
            fields.push("{{ database.name(reference) }} = ?");
            params.push(model.{{ gql.field_label(reference) }});
        }
{%-         endif %}
{%-     endfor %}
{%-     for union in entity.get_unions() %}

        if ('{{ gql.field_label(union) }}' in args) {
            fields.push("{{ database.name(union) }} = ?");
            params.push(model.{{ gql.field_label(union) }});
            fields.push("{{ database.type_name(union) }} = ?");
            params.push(model.{{ gql.field_type(union) }});
        }
{%-     endfor %}

        params.push(model.id);

        if (fields.length) {
            const sql = `
            UPDATE {{ database.name(entity) }} SET
            ${fields.join(', ')}
             WHERE id = ?
            `;

            await this.run(sql, params);
        }

        return this.{{ data.get_entity(entity) }}(id);
    }

    /**
     * delete entity
     *
     * @param {String} id
     */
    async {{ data.delete_entity(entity) }}(id, user) {
        return this.run('DELETE FROM {{ database.name(entity) }} WHERE id = ?', [id])
        .then(stats => stats.changes > 0);
    }

{%-     for reference in entity.get_references() %}

    /**
     * fetch reference
     *
     * @param {Model.{{ model.name(entity) }}} model
     */
    async {{ data.get_reference_for_entity(entity, reference) }}(model) {
        return this.get(`
            SELECT {{ entity_fields(reference.get_referenced()) }}
              FROM {{ database.name(reference.get_referenced()) }}
             WHERE id = ?
            `, [model.{{ gql.field_label(reference) }}])
        .then(row => new Model.{{ database.name(reference.get_referenced()) }}(row));
    }
{%-     endfor %}

{%-     for union in entity.get_unions() %}

    /**
     * fetch union
     *
     * @param {Model.{{ model.name(entity) }}} model
     */
    async {{ data.get_union_for_entity(entity, union) }}(model) {
        switch (model.{{ gql.field_type(union) }}) {
{%-         for reference in union.get_references() %}
            case '{{ database.name(reference) }}':
                return this.get(`
                    SELECT  {{ entity_fields(reference.get_referenced()) }}
                      FROM {{ database.name(reference.get_referenced()) }}
                     WHERE id = ?
                    `,
                    [model.{{ gql.field_label(union) }}]
                ).then(row => new Model.{{ model.name(reference.get_referenced()) }}(row));
{%-         endfor %}
        }
    }
{%-     endfor %}

{%-     for referrer in entity.get_referrers() %}

    /**
     * fetch referrer
     *
     * @param {Model.{{ model.name(entity) }}} model
     */
    async {{ data.get_referrer_for_entity(entity, referrer) }}(model) {
        return this.all(
{%-         if referrer.is_union() %}
            `SELECT {{ entity_fields(referrer.get_entity()) }}
              FROM {{ database.name(referrer.get_entity()) }}
             WHERE {{ database.name(referrer.get_union()) }} = ?
             AND {{ database.type_name(referrer.get_union()) }} = "{{ database.name(referrer) }}"
             `,
{%-         else %}
            `SELECT {{ entity_fields(referrer.get_entity()) }}
               FROM {{ database.name(referrer.get_entity()) }}
              WHERE {{ database.name(referrer) }} = ?`,
{%-         endif %}
            [model.id]
        ).then(rows => rows.map(row => new Model.{{ model.name(referrer.get_entity()) }}(row)));
    }

    /**
     * fetch referrers for loader
     *
     * @param {[string]} ids
     */
    async {{ data.batch_get_referrer(referrer) }}(ids_and_args) {
        const subQueries = [];
        const args = [];
        ids_and_args.forEach(id_and_arg => {
            const limit = id_and_arg.args.first || 5;
            const after = id_and_arg.args.after || '';
            const id = id_and_arg.id;
            const subQuery = `
                SELECT * FROM (
{%-         if referrer.is_union() %}
                SELECT {{ entity_fields(referrer.get_entity()) }}
                  FROM {{ database.name(referrer.get_entity()) }}
                 WHERE {{ gql.field_label(referrer.get_union()) }} = ?
                   AND {{ gql.field_type(referrer.get_union()) }} = "{{ database.name(referrer) }}"
{%-         else %}
                SELECT {{ entity_fields(referrer.get_entity()) }}
                  FROM {{ database.name(referrer.get_entity()) }}
                 WHERE {{ gql.field_label(referrer) }} = ?
{%-         endif %}
                   AND {{database.name(referrer.get_entity()) }}.id > ?
              ORDER BY {{database.name(referrer.get_entity()) }}.id
                 LIMIT ?
                )
            `;
            subQueries.push(subQuery);
            args.push(id, after, limit);
        });

        return this.all(subQueries.join('UNION ALL'), args).then(rows => rows.map(row => new Model.{{ model.name(referrer.get_entity()) }}(row)));
    }


    /**
     * count referrers for loader
     *
     * @param {[string]} ids
     */
    async {{ data.batch_count_referrer(referrer) }}(ids_and_args) {

        const ids = ids_and_args.map(({id}) => id);
        const query = `
{%-         if referrer.is_union() %}
            SELECT count(*) AS count,
                   {{ database.name(referrer.get_union()) }} AS id
              FROM {{ database.name(referrer.get_entity()) }}
             WHERE {{ database.name(referrer.get_union()) }} IN (${ Array(ids.length).fill('?').join(', ') })
               AND {{ database.type_name(referrer.get_union()) }} = "{{ database.name(referrer) }}"
          GROUP BY {{ database.name(referrer.get_union()) }}
{%-         else %}
            SELECT count(*) AS count,
                   {{ database.name(referrer) }} AS id
              FROM {{ database.name(referrer.get_entity()) }}
             WHERE {{ database.name(referrer) }} IN (${ Array(ids.length).fill('?').join(', ') })
          GROUP BY {{ database.name(referrer) }}
{%-         endif %}
        `;

        return this.all(query, ids);
    }
{%-     endfor %}

{%-     for association in entity.get_associations() %}

    /**
     * fetch association
     *
     * @param {Model.{{ model.name(entity) }}} model
     * @returns {[Model.{{ model.name(association.get_other(entity)) }}]}
     */
    async {{ data.get_association_for_entity(entity, association) }}(model) {
        return this.all(
{%-         if association.is_self_referential() %}
            `
    SELECT {{ entity_fields(entity) }}
      FROM {{ database.name(association) }}
      JOIN {{ database.name(entity) }}
        ON {{ database.name(association) }}.{{ database.rhs(association) }} = {{ database.name(entity) }}.id
     WHERE {{ database.name(association) }}.{{ database.lhs(association) }} = ?
     UNION
    SELECT {{ entity_fields(entity) }}
      FROM {{ database.name(association) }}
      JOIN {{ database.name(entity) }}
        ON {{ database.name(association) }}.{{ database.lhs(association) }} = {{ database.name(entity) }}.id
     WHERE {{ database.name(association) }}.{{ database.rhs(association) }} = ?
            `,
            [model.id, model.id]
{%-         else %}
            `
    SELECT {{ entity_fields(association.get_other(entity)) }}
      FROM {{ database.name(association) }}
      JOIN {{ database.name(association.get_other(entity)) }}
        ON {{ database.name(association) }}.{{ database.other_column(entity, association) }} = {{ database.name(association.get_other(entity)) }}.id
     WHERE {{ database.name(association) }}.{{ database.this_column(entity, association) }} = ?
            `,
            [model.id]
{%-         endif %}
        ).then(rows => rows.map(row => new Model.{{ model.name(association.get_other(entity)) }}(row)));
    }

    /**
     * fetch associations for loader
     *
     * @param {[string]} ids
     */
    async {{ data.batch_get_association(entity, association) }}(ids_and_args) {
{%-         if association.is_self_referential() %}
        const subQueries = [];
        const args = [];
        ids_and_args.forEach(id_and_arg => {
            const id = id_and_arg.id;
            const limit = id_and_arg.args.first || 5;
            const after = id_and_arg.args.after || '';
            const subQuery = `
            SELECT * FROM (
                SELECT {{database.name(association) }}.{{ database.lhs(association) }} AS {{ gql.lhs(association) }},
                       {{database.name(association) }}.{{ database.rhs(association) }} AS {{ gql.rhs(association) }}
                  FROM {{ database.name(association) }}
                 WHERE {{ gql.lhs(association) }} = ?
                   AND {{ gql.rhs(association) }} > ?
              ORDER BY {{ gql.rhs(association) }}
                 LIMIT ?
            )
            UNION ALL
            SELECT * FROM (
                SELECT {{database.name(association) }}.{{ database.lhs(association) }} AS {{ gql.lhs(association) }},
                       {{database.name(association) }}.{{ database.rhs(association) }} AS {{ gql.rhs(association) }}
                  FROM {{ database.name(association) }}
                 WHERE {{ gql.rhs(association) }} = ?
                   AND {{ gql.lhs(association) }} > ?
              ORDER BY {{ gql.lhs(association) }}
                 LIMIT ?
            )
            `;
            subQueries.push(subQuery);
            args.push(id, after, limit, id, after, limit);
        });

{%-         else %}
        const subQueries = [];
        const args = [];
        ids_and_args.forEach(id_and_arg => {
            const id = id_and_arg.id;
            const limit = id_and_arg.args.first || 5;
            const after = id_and_arg.args.after || '';
            const subQuery = `
            SELECT * FROM (
                SELECT {{database.name(association) }}.{{ database.lhs(association) }} AS {{ gql.lhs(association) }},
                       {{database.name(association) }}.{{ database.rhs(association) }} AS {{ gql.rhs(association) }}
                  FROM {{ database.name(association) }}
                 WHERE {{ gql.this_column(entity, association) }} = ?
                   AND {{ gql.other_column(entity, association) }} > ?
              ORDER BY {{ gql.other_column(entity, association) }}
                 LIMIT ?
            )
            `;
            subQueries.push(subQuery);
            args.push(id, after, limit);
        });
{%-         endif %}
        return this.all(subQueries.join('UNION ALL'), args).then(rows => rows.map(row => new Model.{{ model.association(association) }}(row)));
    }

    /**
     * fetch associations for loader
     *
     * @param {[string]} ids
     */
    async {{ data.batch_count_association(entity, association) }}(ids_and_args) {
        const ids = ids_and_args.map(({id}) => id);
{%-         if association.is_self_referential() %}
        const query = `
            SELECT count(*) AS count,
                   {{ association.get_rhs_column() }} AS id
              FROM {{ database.name(association) }}
             WHERE {{ association.get_rhs_column() }} in (${ Array(ids.length).fill('?').join(', ') })
          GROUP BY {{ association.get_rhs_column() }}
         UNION ALL
            SELECT count(*) AS count,
                   {{ association.get_lhs_column() }} AS id
              FROM {{ database.name(association) }}
             WHERE {{ association.get_lhs_column() }} in (${ Array(ids.length).fill('?').join(', ') })
          GROUP BY {{ association.get_lhs_column() }}
        `;
        return this.all(query, ids.concat(ids));
{%-         else %}
        const query = `
            SELECT count(*) AS count,
                   {{ association.get_this_column(entity) }} AS id
              FROM {{ database.name(association) }}
             WHERE {{ association.get_this_column(entity) }} IN (${ Array(ids.length).fill('?').join(', ') })
          GROUP BY {{ association.get_lhs_column() }}
        `;
        return this.all(query, ids);
{%-         endif %}
    }


{%-     endfor %}

{%- endfor %}

{%- for association in schema.get_associations() %}

    async {{ data.create_association(association) }}(args) {
{%-     if association.is_self_referential() %}
        if (args.{{ gql.association_rhs_label(association) }} == args.{{ gql.association_lhs_label(association) }}) {
            throw new Error('cannot create {{ gql.field_label(association) }} relationship with the same left and right hand entity');
        }
        // check the inverse association doesn't already exist
        const row = await this.get(`
                SELECT count(*) AS count
                  FROM {{ database.name(association) }}
                 WHERE {{ database.lhs(association) }} = ?
                   AND {{ database.rhs(association) }} = ?
            `,
            [args.{{ gql.association_rhs_label(association) }}, args.{{ gql.association_lhs_label(association) }}]
        );
        if (parseInt(row.count) > 0) {
            return true;
        }
{%-     endif %}
        return this.run(`
            INSERT INTO {{ database.name(association) }}({{ database.lhs(association) }}, {{ database.rhs(association) }})
                 VALUES (?, ?)
            `,
            [args.{{ gql.association_lhs_label(association) }}, args.{{ gql.association_rhs_label(association) }}]
        ).then(stats => stats.changes > 0);
    }


{%-     for lhs in association.get_lhs().get_unique_fields() %}

    async {{ data.create_association_lhs(association, lhs) }}(args) {
        const lhs = await this.{{ data.get_entity_by_field(association.get_lhs(), lhs) }}(args.{{ gql.association_lhs_field_label(association, lhs) }});
        if (!lhs) {
            return false;
        }
        args.{{ gql.association_lhs_label(association) }} = lhs.id;
        return this.{{ data.create_association(association) }}(args);
    }

{%-         for rhs in association.get_rhs().get_unique_fields() %}

    async {{ data.create_association_lhs_rhs(association, lhs, rhs) }}(args) {
        const lhs = await this.{{ data.get_entity_by_field(association.get_lhs(), lhs) }}(args.{{ gql.association_lhs_field_label(association, lhs) }});
        if (!lhs) {
            return false;
        }
        const rhs = await this.{{ data.get_entity_by_field(association.get_rhs(), rhs) }}(args.{{ gql.association_rhs_field_label(association, rhs) }});
        if (!rhs) {
            return false;
        }
        args.{{ gql.association_lhs_label(association) }} = lhs.id;
        args.{{ gql.association_rhs_label(association) }} = rhs.id;
        return this.{{ data.create_association(association) }}(args);
    }

    async {{ data.create_association_rhs(association, rhs) }}(args) {
        const rhs = await this.{{ data.get_entity_by_field(association.get_rhs(), rhs) }}(args.{{ gql.association_rhs_field_label(association, rhs) }});
        if (!rhs) {
            return false;
        }
        args.{{ gql.association_rhs_label(association) }} = rhs.id;
        return this.{{ data.create_association(association) }}(args);
    }

{%-         endfor %}
{%-     else %}
{%-         for rhs in association.get_rhs().get_unique_fields() %}

    async {{ data.create_association_rhs(association, rhs) }}(args) {
        const rhs = await this.{{ data.get_entity_by_field(association.get_rhs(), rhs) }}(args.{{ gql.association_rhs_field_label(association, rhs) }});
        if (!rhs) {
            return false;
        }
        args.{{ gql.association_rhs_label(association) }} = rhs.id;
        return this.{{ data.create_association(association) }}(args);
    }

{%-         endfor %}
{%-     endfor %}


    async {{ data.delete_association(association) }}(args) {
{%-     if association.is_self_referential() %}
        return this.run(`
            DELETE FROM {{ database.name(association) }}
                  WHERE ({{ database.lhs(association) }} = ? AND {{ database.rhs(association) }} = ?)
                     OR ({{ database.rhs(association) }} = ? AND {{ database.lhs(association) }} = ?)
            `,
            [
                args.{{ gql.association_lhs_label(association) }},
                args.{{ gql.association_rhs_label(association) }},
                args.{{ gql.association_lhs_label(association) }},
                args.{{ gql.association_rhs_label(association) }}
            ]
        ).then(stats => stats.changes > 0);
{%-     else %}
        return this.run(`
            DELETE FROM {{ database.name(association) }}
                  WHERE {{ database.lhs(association) }} = ? AND {{ database.rhs(association) }} = ?
            `,
            [args.{{ gql.association_lhs_label(association) }}, args.{{ gql.association_rhs_label(association) }}]
        ).then(stats => stats.changes > 0);
{%-     endif %}
    }
{%- endfor %}

    static async build() {
        if (!this.instance) {
            this.instance = openSqlite({
                filename: './{{ schema.get_name() }}.db',
                driver: sqlite3.Database
            }).then(db => new Data(db))
        }
        return this.instance;
    }
}

module.exports = Data;