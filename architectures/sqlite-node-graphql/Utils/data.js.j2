const sqlite3 = require('sqlite3').verbose();
const { open: openSqlite } = require('sqlite');
const util = require('util');
const Model = require('../Model');
const logger = require('./logger');

// {{ warning }}

class Data {
    constructor(db) {
        this.db = db;
        this.db.run('PRAGMA foreign_keys = ON');
    }

    async get(query, params) {
        logger.debug(`get: ${query} ${params}`);
        return this.db.get(query, params);
    }

    async run(query, params) {
        logger.debug(`run: ${query} ${params}`);
        return this.db.run(query, params);
    }

    async all(query, params) {
        logger.debug(`all: ${query} ${params}`);
        return this.db.all(query, params);
    }

{% for entity in schema.get_entities() %}
    /**
     * fetch entity
     *
     * @param {String} id
     * @returns {Model.{{ entity.get_name() }}}
     */
    async get_{{ entity.get_name() | singular }}_by_id(id) {
      return this.get('SELECT * FROM {{ entity.get_name() }} WHERE id = ?', [id])
        .then(row => new Model.{{ entity.get_name() }}(row));
    }

    /**
     * batch fetch entities for dataloader
     *
     * @param {[String]} ids
     * @returns {[Model.{{ entity.get_name() }}]}
     */
    async batch_get_{{ entity.get_name() }}(ids) {
        const rows = await this.all(
            `SELECT * from {{ entity.get_name() }} WHERE id IN (${ Array(ids.length).fill('?').join(', ') })`,
            ids
        ).then(rows => rows.reduce((acc, row) => ({ ...acc, [row.id]: row }), {}));
        return ids.map(id => rows[id] ? new Model.{{ entity.get_name() }}(rows[id]) : null);
    }

    /**
     * fetch a page of entities
     *
     * @param {object} args
     * @returns {[Model.{{ entity.get_name() }}]}
     */
    async page_get_{{ entity.get_name() }}(args) {
        const take = args.take || 20;
        const skip = args.skip || 0;
        return this.all(
            `SELECT * from {{ entity.get_name() }}
              LIMIT ?
             OFFSET ?
            `,
            [take, skip]
        ).then(rows => rows.map(row => new Model.{{ entity.get_name() }}(row)));
    }

    /**
     * insert entity
     *
     * @param {Model.{{ entity.get_name() }}} model
     */
    async create_{{ entity.get_name() | singular }}(model) {
        const sql = `
        INSERT INTO {{ entity.get_name() }}(
          id{% for field in entity.get_fields() %}, {{ field.get_name() }}{% endfor %}
          {%- for reference in entity.get_references() %}, {{ reference.get_name() }}{% endfor %}
          {%- for union in entity.get_unions() %}, {{ union.get_name() }}, {{ union.get_name() }}_type{% endfor %}
        )
        VALUES (?{{ ', ?' * ((entity.get_fields()|length) + (entity.get_references()|length) + 2*(entity.get_unions()|length)) }})
        `;
        const params = [
           model.id{% for field in entity.get_fields() %}, model.{{ field.get_name() }}{% endfor %}
          {%- for reference in entity.get_references() %}, model.{{ reference.get_name() }}{% endfor %}
          {%- for union in entity.get_unions() %}, model.{{ union.get_name() }}, model.{{ union.get_name() }}_type{% endfor %}
        ]
        return this.run(sql, params);
    }

    /**
     * delete entity
     *
     * @param {String} id
     */
    async delete_{{ entity.get_name() | singular }}_by_id(id) {
        return this.run('DELETE FROM {{ entity.get_name() }} WHERE id = ?', [id]);
    }

{%     for reference in entity.get_references() %}
    /**
     * fetch reference
     *
     * @param {Model.{{ entity.get_name() }}} model
     */
    async get_{{ reference.get_name() }}_for_{{ entity.get_name() | singular }}(model) {
        return this.get('SELECT * FROM {{ reference.get_referenced().get_name() }} WHERE id = ?', [model.{{ reference.get_name() }}])
        .then(row => new Model.{{ reference.get_referenced().get_name() }}(row));
    }
{%     endfor %}

{%     for union in entity.get_unions() %}
    /**
     * fetch union
     *
     * @param {Model.{{ entity.get_name() }}} model
     */
    async get_{{ union.get_name() }}_for_{{ entity.get_name() | singular }}(model) {
        switch (model.{{ union.get_name() }}_type) {
{%         for reference in union.get_references() %}
            case '{{ reference.get_name() }}':
                return this.get(
                    'SELECT * FROM {{ reference.get_referenced().get_name() }} WHERE id = ?',
                    [model.{{ union.get_name() }}]
                ).then(row => new Model.{{ reference.get_referenced().get_name() }}(row));
{%         endfor %}
        }
    }
{%     endfor %}

{%     for referrer in entity.get_referrers() %}
    /**
     * fetch referrer
     *
     * @param {Model.{{ entity.get_name() }}} model
     */
    async get_{{ referrer.get_referrer_name() }}_for_{{ entity.get_name() | singular }}(model) {
        return this.all(
{%         if referrer.is_union() %}
            `SELECT * FROM {{ referrer.get_entity().get_name() }}
             WHERE {{ referrer.get_union().get_name() }} = ?
             AND {{ referrer.get_union().get_name() }}_type = "{{ referrer.get_name() }}"
             `,
{%         else %}
            'SELECT * FROM {{ referrer.get_entity().get_name() }} WHERE {{ referrer.get_name() }} = ?',
{%         endif %}
            [model.id]
        ).then(rows => rows.map(row => new Model.{{ referrer.get_entity().get_name() }}(row)));
    }

    /**
     * fetch referrers
     *
     * @param {[string]} ids
     */
    async batch_get_{{ referrer.get_entity().get_name() }}_by_{{ referrer.get_name() }}(ids) {
        return this.all(
{%         if referrer.is_union() %}
            `SELECT * FROM {{ referrer.get_entity().get_name() }}
             WHERE {{ referrer.get_union().get_name() }} IN (${ Array(ids.length).fill('?').join(', ') })
             AND {{ referrer.get_union().get_name() }}_type = "{{ referrer.get_name() }}"
             `,
{%         else %}
            `SELECT * FROM {{ referrer.get_entity().get_name() }}
            WHERE {{ referrer.get_name() }} IN (${ Array(ids.length).fill('?').join(', ') })`,
{%         endif %}
            ids
        ).then(rows => rows.map(row => new Model.{{ referrer.get_entity().get_name() }}(row)));
    }
{%     endfor %}

{%     for association in entity.get_associations() %}
    /**
     * fetch association
     *
     * @param {Model.{{ entity.get_name() }}} model
     */
    async get_{{ association.get_name_for_other_entity(entity) }}_for_{{ entity.get_name() | singular }}(model) {
        return this.all(
{%         if association.is_self_referential() %}
            `
    SELECT {{ entity.get_name() }}.*
      FROM {{ association.get_name() }}
      JOIN {{ entity.get_name() }}
        ON {{ association.get_name() }}.{{ association.get_rhs_column() }} = {{ entity.get_name() }}.id
     WHERE {{ association.get_name() }}.{{ association.get_lhs_column() }} = ?
     UNION
    SELECT {{ entity.get_name() }}.*
      FROM {{ association.get_name() }}
      JOIN {{ entity.get_name() }}
        ON {{ association.get_name() }}.{{ association.get_lhs_column() }} = {{ entity.get_name() }}.id
     WHERE {{ association.get_name() }}.{{ association.get_rhs_column() }} = ?
            `,
            [model.id, model.id]
{%         else %}
            `
    SELECT {{ association.get_other(entity).get_name() }}.*
      FROM {{ association.get_name() }}
      JOIN {{ association.get_other(entity).get_name() }}
        ON {{ association.get_name() }}.{{ association.get_other_column(entity) }} = {{ association.get_other(entity).get_name() }}.id
     WHERE {{ association.get_name() }}.{{ association.get_this_column(entity) }} = ?
            `,
            [model.id]
{%         endif %}
        ).then(rows => rows.map(row => new Model.{{ association.get_other(entity).get_name() }}(row)));
    }

    /**
     * fetch associations
     *
     * @param {[string]} ids
     */
{%         if association.is_self_referential() %}
    async batch_get_{{ association.get_name() }}_associations(ids) {
        return this.all(`
    SELECT *
      FROM {{ association.get_name() }}
     WHERE {{ association.get_lhs_column() }} IN (${ Array(ids.length).fill('?').join(', ') })
     UNION
    SELECT *
      FROM {{ association.get_name() }}
     WHERE {{ association.get_rhs_column() }} IN (${ Array(ids.length).fill('?').join(', ') })
        `,
        [...ids, ...ids]);
    }
{%         else %}
    async batch_get_{{ association.get_name() }}_{% if association.is_lhs(entity) %}lhs{% else %}rhs{% endif %}(ids) {
        return this.all(`
    SELECT *
      FROM {{ association.get_name() }}
     WHERE {{ association.get_this_column(entity) }} IN (${ Array(ids.length).fill('?').join(', ') })
        `,
        ids);
    }
{%         endif %}
{%     endfor %}

{% endfor %}

    static async build() {
        return openSqlite({
            filename: './{{ schema.get_name() }}.db',
            driver: sqlite3.Database
        }).then(db => new Data(db))
    }
}

module.exports = Data;