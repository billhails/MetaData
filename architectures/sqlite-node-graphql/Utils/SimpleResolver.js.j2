{#
 #  MetaData - API Generator.
 #  Copyright (C) 2022  Bill Hails
 #
 #  This program is free software: you can redistribute it and/or modify
 #  it under the terms of the GNU General Public License as published by
 #  the Free Software Foundation, either version 3 of the License, or
 #  (at your option) any later version.
 #
 #  This program is distributed in the hope that it will be useful,
 #  but WITHOUT ANY WARRANTY; without even the implied warranty of
 #  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 #  GNU General Public License for more details.
 #
 #  You should have received a copy of the GNU General Public License
 #  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 #}
// {{ warning }}

{% import 'macros/resolver.j2h' as resolve %}
{% import 'macros/data.j2h' as data %}

class SimpleResolver {
    constructor(data) {
        this.data = data;
    }
{% for entity in schema.get_entities() %}
    async {{ resolve.entity(entity) }}(entity) {
        return this.data.{{ data.get_entity(entity) }}(entity.id);
    }
{%     for reference in entity.get_references() %}
    async {{ resolve.reference_for_entity(entity, reference) }}(entity) {
        return this.data.{{ data.get_reference_for_entity(entity, reference) }}(entity);
    }
{%     endfor %}
{%     for union in entity.get_unions() %}
    async {{ resolve.union_for_entity(entity, union) }}(entity) {
        return this.data.{{ data.get_union_for_entity(entity, union) }}(entity);
    }
{%     endfor %}
{%     for referrer in entity.get_referrers() %}
    async {{ resolve.referrer_for_entity(entity, referrer) }}(entity) {
        return this.data.{{ data.get_referrer_for_entity(entity, referrer) }}(entity);
    }
{%     endfor %}
{% for association in entity.get_associations() %}
    async {{ resolve.association_for_entity(entity, association) }}(entity) {
        return this.data.{{ data.get_association_for_entity(entity, association) }}(entity);
    }
{%     endfor %}
{% endfor %}
}

module.exports = SimpleResolver;