{#-
 #  MetaData - API Generator.
 #  Copyright (C) 2022-2023  Bill Hails
 #
 #  This program is free software: you can redistribute it and/or modify
 #  it under the terms of the GNU General Public License as published by
 #  the Free Software Foundation, either version 3 of the License, or
 #  (at your option) any later version.
 #
 #  This program is distributed in the hope that it will be useful,
 #  but WITHOUT ANY WARRANTY; without even the implied warranty of
 #  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 #  GNU General Public License for more details.
 #
 #  You should have received a copy of the GNU General Public License
 #  along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#}
// {{ warning }}

/**
 * various dataloader wrapper classes for different types of data,
 * in turn wrapped by an exported Loader class which delegates to them.
 */

{%- import 'macros/loader.j2h' as loader %}
{%- import 'macros/data.j2h' as data %}
{%- import 'macros/database.j2h' as database %}
{%- import 'macros/gql.j2h' as gql %}

const DataLoader = require('dataloader');
const util = require('util');
const logger = require('../../Utils/logger');
const object_hash = require('object-hash');

class EntityLoader {
    constructor({loader, page_get, name}) {
        this.loader = loader;
        this.page_get = page_get;
        this.name = name;
    }

    async load (args) {
        const entities = await this.page_get(args);
        entities.forEach(entity => this.loader().prime(entity.id, entity));
        return entities;
    }

    debug(msg, args) {
        logger.debug(`loader.EntityLoader.${this.name} ${msg} ${util.inspect(args)}`);
    }

    clearAll() {
        this.loader().clearAll();
    }
}

class EntityCountLoader {
    constructor({page_get}) {
        this.page_get = page_get;
    }

    async load (args) {
        return this.page_get(args);
    }

    clearAll() {}
}

class AbstractLoader {
    constructor({batch_get, name}) {
        this.lookup = {};
        this.batch_get = batch_get;
        this.name = name;
        this.loader = new DataLoader(async keys => this.loadBatch(keys));
    }

    async load(id, args) {
        const data = {id, args};
        const key = object_hash(data);
        this.lookup[key] = {id, args, key};
        return this.loader.load(key);
    }

    debug(msg, args) {
        logger.debug(`loader.${this.constructor.name}.${this.name} ${msg} ${util.inspect(args)}`);
    }

    clearAll() {
        this.loader.clearAll();
    }
}

class ReferrerLoader extends AbstractLoader {
    constructor({name, batch_get, entity_loader, referrer_column}) {
        super({batch_get, name});
        this.entity_loader = entity_loader;
        this.referrer_column = referrer_column;
    }

    async loadBatch(keys) {
        const ids_and_args = keys.map(key => this.lookup[key]);
        const referrers = await this.batch_get(ids_and_args);
        referrers.forEach(referrer => this.entity_loader().prime(referrer.id, referrer));
        return ids_and_args.map(({id}) => { // maps [lhs_id, lhs_id, ... ] to [[rhs_entity, rhs_entity, ...], [rhs_entity, ...], ...]
            const id_referrers = {};
            referrers.forEach(
                referrer => {
                    if (referrer[this.referrer_column] == id) {
                        id_referrers[referrer.id] = referrer;
                    }
                }
            );
            return Object.values(id_referrers);
        });
    }
}

class ReferrerCountLoader extends AbstractLoader {

    async loadBatch(keys) {
        const ids_and_args = keys.map(key => this.lookup[key]);
        const referrerCounts = await this.batch_get(ids_and_args);
        const processedCounts = referrerCounts.reduce((acc, count) => ({...acc, [count.id]: count.count}), {});
        return ids_and_args.map(({id}) => ({ count: processedCounts[id] || 0}));
    }
}

class SelfReferentialAssociationLoader extends AbstractLoader {
    constructor({name, batch_get, lhs_column, rhs_column}) {
        super({batch_get, name});
        this.lhs_column = lhs_column;
        this.rhs_column = rhs_column;
    }

    async loadBatch(keys) {
        const ids_and_args = keys.map(key => this.lookup[key])
        const associations = await this.batch_get(ids_and_args);
        return ids_and_args.map(({id}) => {
            const associates = {};
            associations.forEach(association => {
                if (association[this.lhs_column] == id) {
                    associates[association[this.rhs_column]] = true;
                }
                if (association[this.rhs_column] == id) {
                    associates[association[this.lhs_column]] = true;
                }
            });
            return Object.keys(associates);
        });
    }
}

class AssociationLoader extends AbstractLoader {
    constructor({name, batch_get, this_column, other_column}) {
        super({batch_get, name});
        this.this_column = this_column;
        this.other_column = other_column;
    }

    async loadBatch(keys) {
        const ids_and_args = keys.map(key => this.lookup[key]);
        const associations = await this.batch_get(ids_and_args);
        const result = ids_and_args.map(({id}) => {
            const associates = {};
            associations.forEach(association => {
                if (association[this.this_column] == id) {
                    associates[association[this.other_column]] = true;
                }
            });
            return Object.keys(associates);
        });
        return result;
    }
}

class AssociationCountLoader extends AbstractLoader {
    async loadBatch(keys) {
        const ids_and_args = keys.map(key => this.lookup[key]);
        const associationCounts = await this.batch_get(ids_and_args);
        const processedCounts = associationCounts.reduce((acc, count) => ({...acc, [count.id]: count.count}), {});
        return ids_and_args.map(({id}) => processedCounts[id] || 0);
    }
}

class SelfReferentialAssociationCountLoader extends AbstractLoader {
    async loadBatch(keys) {
        const ids_and_args = keys.map(key => this.lookup[key]);
        const associationCounts = await this.batch_get(ids_and_args);
        const processedCounts = {};
        associationCounts.forEach(count => {
            if (!(count.id in processedCounts)) {
                processedCounts[count.id] = 0;
            }
            processedCounts[count.id] += count.count;
        });
        return ids_and_args.map(({id}) => processedCounts[id] || 0);
    }
}

class Loader {
    constructor(data) {
        this.data = data;

{%- for entity in schema.get_entities() %}

        this.{{ loader.entity(entity) }}Object = new DataLoader(async ids => {
            return this.data.{{ data.batch_get_entity(entity) }}(ids);
        });

        this.{{ loader.entities(entity) }}Object = new EntityLoader({
            loader: () => this.{{ loader.entity(entity) }}Object,
            page_get: async args => this.data.{{ data.page_get_entity(entity) }}(args),
            name: '{{ loader.entities(entity) }}'
        });

        this.{{ loader.count_entities(entity) }}Object = new EntityCountLoader({
            page_get: async args => this.data.{{ data.count_entities(entity) }}(args)
        });

{%-     for referrer in entity.get_referrers() %}

        this.{{ loader.referrer(referrer) }}Object = new ReferrerLoader({
            batch_get: async (ids_and_args) => this.data.{{ data.batch_get_referrer(referrer) }}(ids_and_args),
            entity_loader: () => this.{{ loader.entity(referrer.get_entity()) }}Object,
            referrer_column: '{{ referrer.get_column_name() }}',
            name: '{{ loader.referrer(referrer) }}'
        });

        this.{{ loader.count_referrer(referrer) }}Object = new ReferrerCountLoader({
            name: '{{ loader.count_referrer(referrer) }}',
            batch_get: async (ids_and_args) => this.data.{{ data.batch_count_referrer(referrer) }}(ids_and_args)
        });
{%-     endfor %}

{%-     for association in entity.get_associations() %}

{%-         if association.is_self_referential() %}

        this.{{ loader.association_for_entity(entity, association) }}Object = new SelfReferentialAssociationLoader({
            batch_get: async (ids_and_args) => this.data.{{ data.batch_get_association(entity, association) }}(ids_and_args),
            lhs_column: '{{ gql.lhs(association) }}',
            rhs_column: '{{ gql.rhs(association) }}',
            name: '{{ loader.association_for_entity(entity, association) }}'
        });

        this.{{ loader.count_association_for_entity(entity, association) }}Object = new SelfReferentialAssociationCountLoader({
            name: '{{ loader.count_association_for_entity(entity, association) }}',
            batch_get: async (ids_and_args) => this.data.{{ data.batch_count_association(entity, association) }}(ids_and_args)
        });

{%-         else %}

        this.{{ loader.association_for_entity(entity, association) }}Object = new AssociationLoader({
            batch_get: async (ids_and_args) => this.data.{{ data.batch_get_association(entity, association) }}(ids_and_args),
            this_column: '{{ gql.this_column(entity, association) }}',
            other_column: '{{ gql.other_column(entity, association) }}',
            name: '{{ loader.association_for_entity(entity, association) }}'
        });

        this.{{ loader.count_association_for_entity(entity, association) }}Object = new AssociationCountLoader({
            name: '{{ loader.count_association_for_entity(entity, association) }}',
            batch_get: async ids_and_args => this.data.{{ data.batch_count_association(entity, association) }}(ids_and_args)
        });
{%-         endif %}
{%-     endfor %}
{%- endfor %}
    }

    clearAll() {
{%- for entity in schema.get_entities() %}
        this.{{ loader.entity(entity) }}Object.clearAll();
        this.{{ loader.entities(entity) }}Object.clearAll();
{%-     for referrer in entity.get_referrers() %}
        this.{{ loader.referrer(referrer) }}Object.clearAll();
        this.{{ loader.count_referrer(referrer) }}Object.clearAll();
{%-     endfor %}
{%-     for association in entity.get_associations() %}
        this.{{ loader.association_for_entity(entity, association) }}Object.clearAll();
        this.{{ loader.count_association_for_entity(entity, association) }}Object.clearAll();
{%-     endfor %}
{%- endfor %}
    }

{%- for entity in schema.get_entities() %}

    {{ loader.entity(entity) }}(id) {
        return this.{{ loader.entity(entity) }}Object.load(id);
    }

    {{ loader.entities(entity) }}(args) {
        return this.{{ loader.entities(entity) }}Object.load(args);
    }

    {{ loader.count_entities(entity) }}(args) {
        return this.{{ loader.count_entities(entity) }}Object.load(args);
    }

{%-     for referrer in entity.get_referrers() %}

    {{ loader.referrer(referrer) }}(id, args) {
        return this.{{ loader.referrer(referrer) }}Object.load(id, args);
    }

    {{ loader.count_referrer(referrer) }}(id, args) {
        return this.{{ loader.count_referrer(referrer) }}Object.load(id, args);
    }

{%-     endfor %}

{%-     for association in entity.get_associations() %}

    {{ loader.association_for_entity(entity, association) }}(id, args) {
        return this.{{ loader.association_for_entity(entity, association) }}Object.load(id, args);
    }

    {{ loader.count_association_for_entity(entity, association) }}(id, args) {
        return this.{{ loader.count_association_for_entity(entity, association) }}Object.load(id, args);
    }

{%-     endfor %}
{%- endfor %}
}

module.exports = Loader;