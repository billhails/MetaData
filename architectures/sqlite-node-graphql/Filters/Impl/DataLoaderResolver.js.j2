{#-
 #  MetaData - API Generator.
 #  Copyright (C) 2022  Bill Hails
 #
 #  This program is free software: you can redistribute it and/or modify
 #  it under the terms of the GNU General Public License as published by
 #  the Free Software Foundation, either version 3 of the License, or
 #  (at your option) any later version.
 #
 #  This program is distributed in the hope that it will be useful,
 #  but WITHOUT ANY WARRANTY; without even the implied warranty of
 #  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 #  GNU General Public License for more details.
 #
 #  You should have received a copy of the GNU General Public License
 #  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 -#}
// {{ warning }}

{%- import 'macros/resolver.j2h' as resolve %}
{%- import 'macros/loader.j2h' as loader %}
{%- import 'macros/data.j2h' as data %}
{%- import 'macros/gql.j2h' as gql %}
{%- import 'macros/database.j2h' as database %}

const logger = require('../../Utils/logger');
const util = require('util');

class DataLoaderResolver {
    constructor(loaders) {
        this.loaders = loaders;
    }

    clearAll() {
        this.loaders.clearAll();
    }

{%- for entity in schema.get_entities() %}

    async {{ resolve.entity(entity) }}(source, args) {
        return this.loaders.{{ loader.entity(entity) }}.load(args.id);
    }

    async {{ resolve.entities(entity) }}(source, args) {
        return this.loaders.{{ loader.entities(entity) }}.load(args);
    }

    async {{ resolve.count_entities(entity) }}(source, args) {
        return this.loaders.{{ loader.count_entities(entity) }}.load(args);
    }

{%-     for reference in entity.get_references() %}

    async {{ resolve.reference_for_entity(entity, reference) }}(entity, args) {
        return this.loaders.{{ loader.reference(reference) }}.load(entity.{{ gql.field_label(reference) }})
    }

{%-     endfor %}

{%-     for union in entity.get_unions() %}

    async {{ resolve.union_for_entity(entity, union) }}(entity, args) {
        switch (entity.{{ gql.field_label(union) }}Type) {
{%-         for reference in union.get_references() %}
            case "{{ database.name(reference) }}":
                return this.loaders.{{ loader.reference(reference) }}.load(entity.{{ gql.field_label(union) }});
{%-         endfor %}
        }
    }
{%-     endfor %}

{%-     for referrer in entity.get_referrers() %}

    async {{ resolve.referrer_for_entity(entity, referrer) }}(entity, args) {
        return this.loaders.{{ loader.referrer(referrer) }}.load(entity.id, args)
    }

    async {{ resolve.count_referrers_for_entity(entity, referrer) }}(entity, args) {
        return this.loaders.{{ loader.count_referrer(referrer) }}.load(entity.id, args);
    }
{%-     endfor %}

{%-     for association in entity.get_associations() %}

    async {{ resolve.association_for_entity(entity, association) }}(entity, args) {
        const associations = await this.loaders.{{ loader.association_for_entity(entity, association) }}.load(entity.id, args);
        logger.debug(`DataLoaderResolver.{{ resolve.association_for_entity(entity, association) }} got associations from {{ loader.association_for_entity(entity, association) }} ${util.inspect(associations)}`);
        return Promise.all(associations.map(id => this.loaders.{{ loader.other_entity(entity, association) }}.load(id)));
    }

    async {{ resolve.count_association_for_entity(entity, association) }}(entity, args) {
        return this.loaders.{{ loader.count_association_for_entity(entity, association) }}.load(entity.id, args);
    }
{%-     endfor %}

    async {{ resolve.create_entity(entity) }}(_, { input }) {
        logger.debug('DataLoaderResolver.{{ resolve.create_entity(entity) }}', {input});
        return this.loaders.data.{{ data.create_entity(entity) }}(input);
    }

    async {{ resolve.update_entity(entity) }}(_, { id, input }) {
        return this.loaders.data.{{ data.update_entity(entity) }}(id, input);
    }

    async {{ resolve.delete_entity(entity) }}(_, { id }) {
        return this.loaders.data.{{ data.delete_entity(entity) }}(id);
    }

{%- endfor %}

{%- for association in schema.get_associations() %}

    async {{ resolve.create_association(association) }}(_, args) {
        return this.loaders.data.{{ data.create_association(association) }}(args);
    }

{%-     for lhs in association.get_lhs().get_unique_fields() %}

    async {{ resolve.create_association_lhs(association, lhs) }}(source, args) {
        return this.loaders.data.{{ data.create_association_lhs(association, lhs) }}(args);
    }

{%-         for rhs in association.get_rhs().get_unique_fields() %}

    async {{ resolve.create_association_lhs_rhs(association, lhs, rhs) }}(source, args) {
        return this.loaders.data.{{ data.create_association_lhs_rhs(association, lhs, rhs) }}(args);
    }

    async {{ resolve.create_association_rhs(association, rhs) }}(source, args) {
        return this.loaders.data.{{ data.create_association_rhs(association, rhs) }}(args);
    }

{%-         endfor %}
{%-     else %}
{%-         for rhs in association.get_rhs().get_unique_fields() %}

    async {{ resolve.create_association_rhs(association, rhs) }}(source, args) {
        return this.loaders.data.{{ data.create_association_rhs(association, rhs) }}(args);
    }

{%-         endfor %}
{%-     endfor %}

    async {{ resolve.delete_association(association) }}(_, args) {
        return this.loaders.data.{{ data.delete_association(association) }}(args);
    }
{%- endfor %}
}

module.exports = DataLoaderResolver;