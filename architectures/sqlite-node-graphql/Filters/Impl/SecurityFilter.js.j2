{#-
 #  MetaData - API Generator.
 #  Copyright (C) 2022  Bill Hails
 #
 #  This program is free software: you can redistribute it and/or modify
 #  it under the terms of the GNU General Public License as published by
 #  the Free Software Foundation, either version 3 of the License, or
 #  (at your option) any later version.
 #
 #  This program is distributed in the hope that it will be useful,
 #  but WITHOUT ANY WARRANTY; without even the implied warranty of
 #  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 #  GNU General Public License for more details.
 #
 #  You should have received a copy of the GNU General Public License
 #  along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#}
// {{ warning }}

{% import 'macros/resolver.j2h' as resolve %}

const logger = require('../../Utils/logger');
const util = require('util');
const Model = require('../../Model');

class SecurityFilter {
    constructor(resolver) {
        this.resolver = resolver;
    }

    clearAll() {
        this.resolver.clearAll();
    }

    escape(s) {
        let lookup = {
            '&': "&amp;",
            '"': "&quot;",
            '\'': "&apos;",
            '<': "&lt;",
            '>': "&gt;"
        };
        return s.replace( /[&"'<>]/g, c => lookup[c] );
    }

{%- for entity in schema.get_entities() %}

    // post-process entity
    {{ resolve.process_entity(entity) }}(model, req) {
        return this.resolver.{{ resolve.process_entity(entity) }}(model, req);
    }

    // post-process entities connection
    {{ resolve.process_entities(entity) }}(connection, req) {
        return this.resolver.{{ resolve.process_entities(entity) }}(connection, req);
    }

{%-    if entity.is_auth_role('owner') %}

    async {{ resolve.owner() }}(source, args, req, info) {
        return this.{{ resolve.entity(entity) }}(source, { id: req.user.sub }, req, info);
    }

{%-        for referrer in entity.get_referrers() %}

    async {{ resolve.owned_entities(referrer) }}(source, args, req, info) {
        return this.resolver.{{ resolve.owned_entities(referrer) }}(source, args, req, info);
    }

{%-        endfor %}

{%-        for association in entity.get_associations() %}

    async {{ resolve.owned_association_for_entity(entity, association) }}(source, args, req, info) {
        return this.resolver.{{ resolve.owned_association_for_entity(entity, association) }}(source, args, req, info);
    }

{%-        endfor %}

{%-    endif %}

    // resolve entity
    async {{ resolve.entity(entity) }}(source, args, req, info) {
        return this.resolver.{{ resolve.entity(entity) }}(source, args, req, info);
    }

    // resolve entities
    async {{ resolve.entities(entity) }}(source, args, req, info) {
        return this.resolver.{{ resolve.entities(entity) }}(source, args, req, info);
    }

{%-     for reference in entity.get_references() %}

    // resolve reference for entity
    async {{ resolve.reference_for_entity(entity, reference) }}(entity, args, req, info) {
        return this.resolver.{{ resolve.reference_for_entity(entity, reference) }}(entity, args, req, info);
    }

{%-     endfor %}

{%-     for union in entity.get_unions() %}

    // resolve union for entity
    async {{ resolve.union_for_entity(entity, union) }}(entity, args, req, info) {
        return this.resolver.{{ resolve.union_for_entity(entity, union) }}(entity, args, req, info);
    }

{%-     endfor %}

{%-     for referrer in entity.get_referrers() %}

    // resolve referrer for entity
    async {{ resolve.referrer_for_entity(entity, referrer) }}(entity, args, req, info) {
        return this.resolver.{{ resolve.referrer_for_entity(entity, referrer) }}(entity, args, req, info);
    }

{%-     endfor %}

{%-     for association in entity.get_associations() %}

    // resolve association for entity
    async {{ resolve.association_for_entity(entity, association) }}(entity, args, req, info) {
        return this.resolver.{{ resolve.association_for_entity(entity, association) }}(entity, args, req, info);
    }

{%-     endfor %}

    // resolve create entity
    async {{ resolve.create_entity(entity) }}(source, args, req, info) {

{%-     if schema.is_xss_secure() %}
{%-         for field in entity.get_fields() %}
{%-             if field.is_xss_susceptible() %}
        if (args.input.{{ field.get_name() }}) {
            args.input.{{ field.get_name() }} = this.escape(args.input.{{ field.get_name() }});
        }
{%-             endif %}
{%-         endfor %}
{%-     endif %}

        return this.resolver.{{ resolve.create_entity(entity) }}(source, args, req, info);
    }

    // resolve update entity
    async {{ resolve.update_entity(entity) }}(source, args, req, info) {

{%-     if schema.is_xss_secure() %}
{%-         for field in entity.get_fields() %}
{%-             if field.is_xss_susceptible() %}
        if (args.input.{{ field.get_name() }}) {
            args.input.{{ field.get_name() }} = this.escape(args.input.{{ field.get_name() }});
        }
{%-             endif %}
{%-         endfor %}
{%-     endif %}

        return this.resolver.{{ resolve.update_entity(entity) }}(source, args, req, info);
    }

    // resolve delete entity
    async {{ resolve.delete_entity(entity) }}(source, args, req, info) {
        return this.resolver.{{ resolve.delete_entity(entity) }}(source, args, req, info);
    }

{%- endfor %}

{%- for association in schema.get_associations() %}

    // resolve create association
    async {{ resolve.create_association(association) }}(source, args, req, info) {
        return this.resolver.{{ resolve.create_association(association) }}(source, args, req, info);
    }

{%-     for lhs in association.get_lhs().get_unique_fields() %}

    async {{ resolve.create_association_lhs(association, lhs) }}(source, args, req, info) {
        return this.resolver.{{ resolve.create_association_lhs(association, lhs) }}(source, args, req, info);
    }

{%-         for rhs in association.get_rhs().get_unique_fields() %}

    async {{ resolve.create_association_lhs_rhs(association, lhs, rhs) }}(source, args, req, info) {
        return this.resolver.{{ resolve.create_association_lhs_rhs(association, lhs, rhs) }}(source, args, req, info);
    }

    async {{ resolve.create_association_rhs(association, rhs) }}(source, args, req, info) {
        return this.resolver.{{ resolve.create_association_rhs(association, rhs) }}(source, args, req, info);
    }

{%-         endfor %}
{%-     else %}
{%-         for rhs in association.get_rhs().get_unique_fields() %}

    async {{ resolve.create_association_rhs(association, rhs) }}(source, args, req, info) {
        return this.resolver.{{ resolve.create_association_rhs(association, rhs) }}(source, args, req, info);
    }

{%-         endfor %}
{%-     endfor %}

    // resolve delete association
    async {{ resolve.delete_association(association) }}(source, args, req) {
        return this.resolver.{{ resolve.delete_association(association) }}(source, args, req, info);
    }

{%- endfor %}
}

module.exports = SecurityFilter;