{#-
 #  MetaData - API Generator.
 #  Copyright (C) 2022-2023  Bill Hails
 #
 #  This program is free software: you can redistribute it and/or modify
 #  it under the terms of the GNU General Public License as published by
 #  the Free Software Foundation, either version 3 of the License, or
 #  (at your option) any later version.
 #
 #  This program is distributed in the hope that it will be useful,
 #  but WITHOUT ANY WARRANTY; without even the implied warranty of
 #  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 #  GNU General Public License for more details.
 #
 #  You should have received a copy of the GNU General Public License
 #  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 -#}
// {{ warning }}

{%- import 'macros/resolver.j2h' as resolve %}
{%- import 'macros/gql.j2h' as gql %}

const logger = require('../../Utils/logger');
const util = require('util');
const { parseResolveInfo } = require('graphql-parse-resolve-info');

/**
 * convert graphql requests to dataloader requests and translate the raw data responses to GraphQL structures
 */
class GraphQLFilter {
    constructor(resolver) {
        this.resolver = resolver;
    }

    clearAll() {
        this.resolver.clearAll();
    }

    makeConnection(rows, count) {
        const startCursor = rows.length ? rows[0].id : null;
        const endCursor = rows.length ? rows[rows.length - 1].id : null;
        const hasPreviousPage = false;
        const hasNextPage = false;
        return {
            totalCount: count,
            edges: rows.map(row => ({ cursor: row.id, node: row })),
            pageInfo: {
                startCursor,
                endCursor,
                hasPreviousPage,
                hasNextPage
            }
        };
    }

{%- for entity in schema.get_entities() %}

    async {{ resolve.entity(entity) }}(source, args, req, info) {
        return this.resolver.{{ resolve.entity(entity) }}(source, args, req, info);
    }

    async {{ resolve.entities(entity) }}(source, args, req, info) {
        const parsedInfo = parseResolveInfo(info);
        let totalCount = 0;
        if (parsedInfo.fieldsByTypeName?.{{ gql.entity_connection(entity) }}?.totalCount) {
            const countResult = await this.resolver.{{ resolve.count_entities(entity) }}(source, args, req, info);
            totalCount = countResult.count || 0;
            if (totalCount == 0) {
                return this.makeConnection([], 0);
            }
        }
        if (parsedInfo.fieldsByTypeName?.{{ gql.entity_connection(entity) }}?.edges) {
            return this.resolver.{{ resolve.entities(entity) }}(source, args, req, info).then(page => this.makeConnection(page, totalCount));
        }
        return this.makeConnection([], totalCount);
    }

{%-     for reference in entity.get_references() %}

    async {{ resolve.reference_for_entity(entity, reference) }}(entity, args, req, info) {
        return this.resolver.{{ resolve.reference_for_entity(entity, reference) }}(entity, args, req, info);
    }

{%-     endfor %}

{%-     for union in entity.get_unions() %}

    async {{ resolve.union_for_entity(entity, union) }}(entity, args, req, info) {
        return this.resolver.{{ resolve.union_for_entity(entity, union) }}(entity, args, req, info);
    }

{%-     endfor %}

{%-     for referrer in entity.get_referrers() %}

    async {{ resolve.referrer_for_entity(entity, referrer) }}(entity, args, req, info) {
        const parsedInfo = parseResolveInfo(info);
        let totalCount = 0;
        if (parsedInfo.fieldsByTypeName?.{{ gql.entity_connection(referrer.get_entity()) }}?.totalCount) {
            const countResult = await this.resolver.{{ resolve.count_referrers_for_entity(entity, referrer) }}(entity, args, req, info);
            totalCount = countResult.count || 0;
            if (totalCount == 0) {
                return this.makeConnection([], 0);
            }
        }
        if (parsedInfo.fieldsByTypeName?.{{ gql.entity_connection(referrer.get_entity()) }}?.edges) {
            return this.resolver.{{ resolve.referrer_for_entity(entity, referrer) }}(entity, args, req, info).then(page => this.makeConnection(page, totalCount));
        }
        return this.makeConnection([], totalCount)
    }

{%-     endfor %}

{%-     for association in entity.get_associations() %}

    async {{ resolve.association_for_entity(entity, association) }}(entity, args, req, info) {
        const parsedInfo = parseResolveInfo(info);
        let totalCount = 0;
        if (parsedInfo.fieldsByTypeName?.{{ gql.entity_connection(association.get_other(entity)) }}?.totalCount) {
            const countResult = await this.resolver.{{ resolve.count_association_for_entity(entity, association) }}(entity, args, req, info);
            totalCount = countResult || 0;
            if (totalCount == 0) {
                return this.makeConnection([], 0)
            }
        }
        if (parsedInfo.fieldsByTypeName?.{{ gql.entity_connection(association.get_other(entity)) }}?.edges) {
            return this.resolver.{{ resolve.association_for_entity(entity, association) }}(entity, args, req, info).then(page => this.makeConnection(page, totalCount));
        }
        return this.makeConnection([], totalCount);
    }

{%-     endfor %}

    async {{ resolve.create_entity(entity) }}(source, args, req, info) {
        return this.resolver.{{ resolve.create_entity(entity) }}(source, args, req, info);
    }

    async {{ resolve.update_entity(entity) }}(source, args, req, info) {
        return this.resolver.{{ resolve.update_entity(entity) }}(source, args, req, info);
    }

    async {{ resolve.delete_entity(entity) }}(source, args, req, info) {
        return this.resolver.{{ resolve.delete_entity(entity) }}(source, args, req, info).then(status => ({status}));
    }

{%- endfor %}

{%- for association in schema.get_associations() %}

    async {{ resolve.create_association(association) }}(source, args, req, info) {
        return this.resolver.{{ resolve.create_association(association) }}(source, args, req, info).then(status => ({status}));
    }

{%-     for lhs in association.get_lhs().get_unique_fields() %}

    async {{ resolve.create_association_lhs(association, lhs) }}(source, args, req, info) {
        return this.resolver.{{ resolve.create_association_lhs(association, lhs) }}(source, args, req, info).then(status => ({status}));
    }

{%-         for rhs in association.get_rhs().get_unique_fields() %}

    async {{ resolve.create_association_lhs_rhs(association, lhs, rhs) }}(source, args, req, info) {
        return this.resolver.{{ resolve.create_association_lhs_rhs(association, lhs, rhs) }}(source, args, req, info).then(status => ({status}));
    }

    async {{ resolve.create_association_rhs(association, rhs) }}(source, args, req, info) {
        return this.resolver.{{ resolve.create_association_rhs(association, rhs) }}(source, args, req, info).then(status => ({status}));
    }

{%-         endfor %}
{%-     else %}
{%-         for rhs in association.get_rhs().get_unique_fields() %}

    async {{ resolve.create_association_rhs(association, rhs) }}(source, args, req, info) {
        return this.resolver.{{ resolve.create_association_rhs(association, rhs) }}(source, args, req, info).then(status => ({status}));
    }

{%-         endfor %}
{%-     endfor %}

    async {{ resolve.delete_association(association) }}(source, args, req, info) {
        return this.resolver.{{ resolve.delete_association(association) }}(source, args, req, info).then(status => ({status}));
    }

{%- endfor %}
}

module.exports = GraphQLFilter;