// {{ warning }}
{% macro graphQLType(type) %}GraphQLString{% endmacro %}
{% import 'resolver.j2h' as resolve %}
const {
  GraphQLEnumType,
  GraphQLInterfaceType,
  GraphQLList,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLUnionType,
  GraphQLInputObjectType,
} = require('graphql/type/definition');
const { GraphQLInt, GraphQLBoolean } = require('graphql/type');
const { GraphQLString, GraphQLID } = require('graphql/type/scalars');
const { GraphQLSchema } = require('graphql/type/schema');
const { printSchema } = require('graphql/utilities');
const logger = require('../Utils/logger');
const Model = require('../Model');

{% macro graphQLType(type) %}GraphQLString{% endmacro %}
{% macro union_enum_type(entity, union) %}{{ entity.get_name() | mixed_case }}{{ union.get_name() | mixed_case }}EnumType{% endmacro %}
{% macro union_type(entity, union) %}{{ entity.get_name() }}_{{ union.get_name() }}Type{% endmacro %}
{% macro entity_type(entity) %}{{ entity.get_name() }}Type{% endmacro %}
{% macro entity_input_type(entity) %}{{ entity.get_name() }}InputType{% endmacro %}
{% macro union_input_type(entity, union) %}{{ entity.get_name() }}_{{ union.get_name() }}InputType{% endmacro %}
{% macro entity_update_type(entity) %}{{ entity.get_name() }}UpdateType{% endmacro %}

const make_schema = (resolver) => {
{% for entity in schema.get_entities() %}

{%     for union in entity.get_unions() %}
    const {{ union_enum_type(entity, union) }} = new GraphQLEnumType({
        name: '{{ union.get_name() }}Type',
        values: {
{%         for reference in union.get_references() %}
            {{ reference.get_name() }}: { value: '{{ reference.get_name() }}' },
{%         endfor %}
        }
    });


    const {{ union_type(entity, union) }} = new GraphQLUnionType({
      name: '{{ union.get_name() }}',
      types: () => ([
{%         for reference in union.get_references() %}{{ entity_type(reference.get_referenced()) }}, {% endfor %}
      ]),
      resolveType(value) {
{%             for reference in union.get_references() %}
        if (value instanceof Model.{{ reference.get_referenced().get_name() }}) {
          return {{ entity_type(reference.get_referenced()) }};
        }
{%         endfor %}
      }
    });
{%     endfor %}

    const {{ entity_type(entity) }} = new GraphQLObjectType ({
      name: '{{ entity.get_name() | mixed_case | singular }}',
      description: '{{ entity.get_description() }}',
      fields: () => ({
        id: {
          type: new GraphQLNonNull(GraphQLID),
          description: '{{ entity.get_name() }} id.',
        },
{%     for field in entity.get_fields() %}
        {{ field.get_name() }}: {
          type: new GraphQLNonNull({{ graphQLType(field.get_type()) }})
        },
{%     endfor %}
{%     for reference in entity.get_references() %}
        {{ reference.get_name() }}: {
          type: new GraphQLNonNull({{ entity_type(reference.get_referenced()) }}),
          resolve: entity => resolver.{{ resolve.reference_for_entity(entity, reference) }}(entity)
        },
{%     endfor %}
{%     for union in entity.get_unions() %}
        {{ union.get_name() }}: {
          type: new GraphQLNonNull({{ union_type(entity, union) }}),
          resolve: entity => resolver.{{ resolve.union_for_entity(entity, union) }}(entity)
        },
{%     endfor %}
{%     for referrer in entity.get_referrers() %}
        {{ referrer.get_referrer_name() }}: {
          type: new GraphQLList({{ entity_type(referrer.get_entity()) }}),
          args: {
            take: {
              description: 'limit',
              type: GraphQLInt,
            },
            skip: {
              description: 'offset',
              type: GraphQLInt,
            },
          },
          resolve: (entity, args) => resolver.{{ resolve.referrer_for_entity(entity, referrer) }}(entity, args)
        },
{%     endfor %}
{%     for association in entity.get_associations() %}
        {{ association.get_name_for_other_entity(entity) }}: {
          type: new GraphQLList({{ entity_type(association.get_other(entity)) }}),
          args: {
            take: {
              description: 'limit',
              type: GraphQLInt,
            },
            skip: {
              description: 'offset',
              type: GraphQLInt,
            },
          },
          resolve: (entity, args) => resolver.{{ resolve.association_for_entity(entity, association) }}(entity, args)
        },
{%     endfor %}
      })
    });

{%     for union in entity.get_unions() %}
    const {{ union_input_type(entity, union) }} = new GraphQLInputObjectType({
        name: 'Add{{ entity.get_name() | mixed_case }}{{ union.get_name() | mixed_case }}',
        description: 'input object to create {{ entity.get_name() }} {{ union.get_name() }} unions.',
        fields: () => ({
            id: {
                type: new GraphQLNonNull(GraphQLID)
            },
            type: {
                type: new GraphQLNonNull({{ union_enum_type(entity, union) }})
            }
        })
    });
{%     endfor %}

    const {{ entity_input_type(entity) }} = new GraphQLInputObjectType({
        name: 'Add{{ entity.get_name() | mixed_case | singular }}',
        description: 'input object to create a new {{ entity.get_name() }}',
        fields: () => ({
{%     for field in entity.get_fields() %}
            {{ field.get_name() }}: {
                type: new GraphQLNonNull({{ graphQLType(field.get_type()) }})
            },
{%     endfor %}
{%     for reference in entity.get_references() %}
            {{ reference.get_name() }}: {
              type: new GraphQLNonNull(GraphQLID)
            },
{%     endfor %}
{%     for union in entity.get_unions() %}
            {{ union.get_name() }}: {
              type: new GraphQLNonNull({{ union_input_type(entity, union) }})
            },
{%     endfor %}
        }),
    });

    const {{ entity_update_type(entity) }} = new GraphQLInputObjectType({
        name: 'Update{{ entity.get_name() | mixed_case | singular }}',
        description: 'input object to update an existing {{ entity.get_name() }}',
        fields: () => ({
{%     for field in entity.get_fields() %}
            {{ field.get_name() }}: {
                type: {{ graphQLType(field.get_type()) }}
            },
{%     endfor %}
{%     for reference in entity.get_references() %}
            {{ reference.get_name() }}: {
              type: GraphQLID
            },
{%     endfor %}
{%     for union in entity.get_unions() %}
            {{ union.get_name() }}: {
              type: {{ union_input_type(entity, union) }}
            },
{%     endfor %}
        }),
    });

{% endfor %}

    const queryType = new GraphQLObjectType({
      name: 'Query',
      fields: () => ({
{% for entity in schema.get_entities() %}
        {{ entity.get_name() | singular}}: {
          type: {{ entity_type(entity) }},
          args: {
            id: {
              description: '{{ entity.get_name() }} id',
              type: new GraphQLNonNull(GraphQLID),
            }
          },
          resolve: (_source, args) => resolver.{{ resolve.entity(entity) }}(args),
        },
        {{ entity.get_name() }}: {
          type: new GraphQLList({{ entity_type(entity) }}),
          args: {
            take: {
              description: 'limit',
              type: GraphQLInt,
            },
            skip: {
              description: 'offset',
              type: GraphQLInt,
            },
          },
          resolve: (_source, args) => resolver.{{ resolve.entities(entity) }}(args),
        },
{% endfor %}
      })
    });

    const mutationType = new GraphQLObjectType({
        name: 'Mutation',
        fields: () => ({
{% for entity in schema.get_entities() %}
            'create{{ entity.get_name() | mixed_case | singular }}': {
                type: {{ entity_type(entity) }},
                args: {
                    input: {
                        type: new GraphQLNonNull({{ entity_input_type(entity) }})
                    }
                },
                resolve: (_, {input}) => resolver.{{ resolve.create_entity(entity) }}(input),
            },
            'update{{ entity.get_name() | mixed_case | singular }}': {
                type: {{ entity_type(entity) }},
                args: {
                    id: {
                         type: new GraphQLNonNull(GraphQLID)
                    },
                    input: {
                        type: new GraphQLNonNull({{ entity_update_type(entity) }})
                    }
                },
                resolve: (_, {id, input}) => resolver.{{ resolve.update_entity(entity) }}(id, input),
            },
            'delete{{ entity.get_name() | mixed_case | singular }}': {
                type: GraphQLBoolean,
                args: {
                    id: {
                         type: new GraphQLNonNull(GraphQLID)
                    },
                },
                resolve: (_, {id}) => resolver.{{ resolve.delete_entity(entity) }}(id)
            },
{% endfor %}
{% for association in schema.get_associations() %}
            'create{{ association.get_name() | mixed_case }}Association': {
                type: GraphQLBoolean,
                args: {
                    {{ association.get_lhs_column() }}: {
                        type: new GraphQLNonNull(GraphQLID)
                    },
                    {{ association.get_rhs_column() }}: {
                        type: new GraphQLNonNull(GraphQLID)
                    },
                },
                resolve: (_, args) => resolver.{{ resolve.create_association(association) }}(args)
            },
            'delete{{ association.get_name() | mixed_case }}Association': {
                type: GraphQLBoolean,
                args: {
                    {{ association.get_lhs_column() }}: {
                        type: new GraphQLNonNull(GraphQLID)
                    },
                    {{ association.get_rhs_column() }}: {
                        type: new GraphQLNonNull(GraphQLID)
                    },
                },
                resolve: (_, args) => resolver.{{ resolve.delete_association(association) }}(args)
            },
{% endfor %}
        })
    });


    const schema = new GraphQLSchema({
      query: queryType,
      mutation: mutationType
    });

    // logger.debug(printSchema(schema));

    return schema;

};

module.exports = make_schema;