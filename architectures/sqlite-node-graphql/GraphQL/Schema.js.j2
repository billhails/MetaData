// {{ warning }}
{% macro graphQLType(type) -%}
GraphQLString
{%- endmacro -%}
const {
  GraphQLEnumType,
  GraphQLInterfaceType,
  GraphQLList,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLUnionType
} = require('graphql/type/definition');
const { GraphQLString, GraphQLID } = require('graphql/type/scalars');
const { GraphQLSchema } = require('graphql/type/schema');

const make_schema = (resolver) => {
{% for entity in schema.get_entities() %}
{% for union in entity.get_unions() %}
    const {{ entity.get_name() }}_{{ union.get_name() }}Type = new GraphQLUnionType({
      name: '{{ union.get_name() }}',
      types: () => ([
{% for reference in union.get_references() %}{{ reference.get_referenced().get_name() }}Type, {% endfor %}
      ]),
      resolveType(value) {
{% for reference in union.get_references() %}
        if (value instanceof Model.{{ reference.get_referenced().get_name() }}) {
          return {{ reference.get_referenced().get_name() }}Type;
        }
{% endfor %}
      }
    });
{% endfor %}
{% endfor %}

{% for entity in schema.get_entities() %}
    const {{ entity.get_name() }}Type = new GraphQLObjectType ({
      name: '{{ entity.get_name() }}',
      description: '{{ entity.get_description() }}',
      fields: () => ({
        id: {
          type: new GraphQLNonNull(GraphQLID),
          description: '{{ entity.get_name() }} id.',
        },
{% for field in entity.get_fields() %}
        {{ field.get_name() }}: {
          type: new GraphQLNonNull({{ graphQLType(field.get_type()) }})
        },
{% endfor %}
{% for reference in entity.get_references() %}
        {{ reference.get_name() }}: {
          type: new GraphQLNonNull({{ reference.get_referenced().get_name() }}Type),
          resolve: entity => resolver.resolve_{{ reference.get_name() }}_for_{{ entity.get_name() | singular }}(entity)
        },
{% endfor %}
{% for union in entity.get_unions() %}
        {{ union.get_name() }}: {
          type: new GraphQLNonNull({{ entity.get_name() }}_{{ union.get_name() }}Type),
          resolve: entity => resolver.resolve_{{ union.get_name() }}_for_{{ entity.get_name() | singular }}(entity)
        },
{% endfor %}
{% for referrer in entity.get_referrers() %}
        {{ referrer.get_referrer_name() }}: {
          type: new GraphQLList({{ referrer.get_entity().get_name() }}Type),
          resolve: entity => resolver.resolve_{{ referrer.get_referrer_name() }}_for_{{ entity.get_name() | singular }}(entity)
        },
{% endfor %}
{% for association in entity.get_associations() %}
        {{ association.get_name_for_other_entity(entity) }}: {
          type: new GraphQLList({{ association.get_other(entity).get_name() }}Type),
          resolve: entity => resolver.resolve_{{ association.get_name_for_other_entity(entity) }}_for_{{ entity.get_name() | singular }}_association(entity)
        },
{% endfor %}
      })
    });
{% endfor %}

    const queryType = new GraphQLObjectType({
      name: 'Query',
      fields: () => ({
{% for entity in schema.get_entities() %}
        {{ entity.get_name() }}: {
          type: {{ entity.get_name() }}Type,
          args: {
            id: {
              description: '{{ entity.get_name() }} id',
              type: new GraphQLNonNull(GraphQLID),
            }
          },
          resolve: (_source, entity) => resolver.resolve_{{ entity.get_name() | singular }}(entity),
        },
{% endfor %}
      })
    });

    return new GraphQLSchema({
      query: queryType
    });

};

module.exports = make_schema;