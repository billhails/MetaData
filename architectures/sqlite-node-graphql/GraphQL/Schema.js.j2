{#-
 #  MetaData - API Generator.
 #  Copyright (C) 2022  Bill Hails
 #
 #  This program is free software: you can redistribute it and/or modify
 #  it under the terms of the GNU General Public License as published by
 #  the Free Software Foundation, either version 3 of the License, or
 #  (at your option) any later version.
 #
 #  This program is distributed in the hope that it will be useful,
 #  but WITHOUT ANY WARRANTY; without even the implied warranty of
 #  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 #  GNU General Public License for more details.
 #
 #  You should have received a copy of the GNU General Public License
 #  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 -#}
// {{ warning }}

{%- import 'macros/resolver.j2h' as resolve %}
{%- import 'macros/gql.j2h' as gql %}
{%- import 'macros/model.j2h' as model %}
{%- import 'macros/database.j2h' as database %}

const {
    GraphQLEnumType,
    GraphQLInterfaceType,
    GraphQLList,
    GraphQLNonNull,
    GraphQLObjectType,
    GraphQLUnionType,
    GraphQLInputObjectType,
    GraphQLScalarType,
    GraphQLInt,
    GraphQLBoolean,
    GraphQLString,
    GraphQLID,
    GraphQLSchema,
    printSchema
} = require('graphql');
const logger = require('../Utils/logger');
const Model = require('../Model');

const uuidPattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/;
const base64Pattern = /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/;

function idToCursor(id) {
    if (uuidPattern.test(id)) {
        return Buffer.from(id.replaceAll('-', ''), 'hex').toString('base64');
    }
    logger.error('invalid id cannot be converted to cursor', {id});
    return null;
}

function cursorToId(cursor) {
    if (!base64Pattern.test(cursor)) {
        logger.error("invalid cursor cannot be converted to id (regex match failed)", {cursor});
        return null;
    }

    const hex = Buffer.from(cursor, 'base64').toString('hex');

    if (hex.length !== 32) {
        logger.error("invalid cursor cannot be converted to id (wrong size)", {cursor});
        return null;
    }

    const uuid = [
        hex.substring(0, 8),
        hex.substring(8, 12),
        hex.substring(12, 16),
        hex.substring(16, 20),
        hex.substring(20, 32)
    ].join('-');

    if (uuidPattern.test(uuid)) {
        // first char of the fourth group must match [89ab]
        return uuid;
    }

    logger.error("invalid cursor cannot be converted to id (bad uuid format)", {cursor});
    return null;
}

const make_schema = (resolver) => {
    const statusType = new GraphQLObjectType ({
        name: 'status',
        fields: {
            status: {
                type: new GraphQLNonNull(GraphQLBoolean)
            }
        },
    });

    const cursorType = new GraphQLScalarType({
        name: 'Cursor',
        description: 'Cursor type.',
        serialize(id) {
            return idToCursor(id);
        },
        parseValue(cursor) {
            return cursorToId(cursor);
        },
        parseLiteral(ast) {
            if (ast.kind === "StringValue") {
                return cursorToId(ast.value);
            }
            logger.error('invalid type for cursor', {kind: ast.kind});
            return null;
        },
    });

    const pageInfo = new GraphQLObjectType({
        name: 'pageInfo',
        description: 'Information about this page of results.',
        fields: {
            startCursor: {
                type: cursorType,
                description: 'The first cursor on this page.'
            },
            endCursor: {
                type: cursorType,
                description: 'The last cursor on this page.'
            },
            hasPreviousPage: {
                type: new GraphQLNonNull(GraphQLBoolean),
                description: 'True if there is a previous page.'
            },
            hasNextPage: {
                type: new GraphQLNonNull(GraphQLBoolean),
                description: 'True if there is a next page.'
            }
        }
    });

{%- for entity in schema.get_entities() %}


    const {{ gql.entity_edge(entity) }} = new GraphQLObjectType({
        name: '{{ gql.entity_edge(entity) }}',
        description: 'A single paginated {{ entity.get_name() | singular }}.',
        fields: () => ({
            cursor: {
                type: new GraphQLNonNull(cursorType),
                description: 'The cursor for this {{ entity.get_name() | singular }}.'
            },
            node: {
{%     if entity.auth_visibility() == "visible" %}
                type: new GraphQLNonNull({{ gql.entity_type(entity) }}),
{%     else %}
                type: {{ gql.entity_type(entity) }},
{%     endif %}
                description: 'The {{ entity.get_name() | singular }} itself.'
            }
        })
    });

    const {{ gql.entity_connection(entity) }} = new GraphQLObjectType({
        name: '{{ gql.entity_connection(entity) }}',
        description: 'Relay-conformant pagination for {{ entity.get_name() }}.',
        fields: () => ({
            totalCount: {
                type: new GraphQLNonNull(GraphQLInt),
                description: 'Total number of {{ gql.entity_edge(entity) }} that could be returned by the query.',
            },
            edges: {
                type: new GraphQLNonNull(new GraphQLList({{ gql.entity_edge(entity) }}))
            },
            pageInfo: {
                type: new GraphQLNonNull(pageInfo),
                description: 'Information about this page of results.'
            }
        })
    });

{%-     for union in entity.get_unions() %}

    const {{ gql.union_enum_type(entity, union) }} = new GraphQLEnumType({
        name: '{{ gql.union_enum_type(entity, union) }}',
        values: {
{%-         for reference in union.get_references() %}
            {{ gql.field_label(reference) }}: { value: '{{ database.name(reference) }}' },
{%-         endfor %}
        }
    });

    const {{ gql.union_type(entity, union) }} = new GraphQLUnionType({
        name: '{{ gql.union_type(entity, union) }}',
        types: () => ([
{%-         for reference in union.get_references() %}{{ gql.entity_type(reference.get_referenced()) }}, {% endfor -%}
        ]),
        resolveType(value) {
{%-         for reference in union.get_references() %}
            if (value instanceof Model.{{ model.name(reference.get_referenced()) }}) {
                return {{ gql.entity_type(reference.get_referenced()) }};
            }
{%-         endfor %}
        }
    });
{%-     endfor %}

    const {{ gql.entity_type(entity) }} = new GraphQLObjectType ({
        name: '{{ gql.entity_type(entity) }}',
        description: '{{ entity.get_description() }}',
        fields: () => ({
            id: {
                type: new GraphQLNonNull(GraphQLID),
                description: 'The {{ database.name(entity) | singular }} id.',
            },
            dateCreated: {
                type: new GraphQLNonNull(GraphQLString),
                description: 'The datetime the {{ database.name(entity) | singular }} was originally created.',
            },
            dateLastUpdated: {
                type: new GraphQLNonNull(GraphQLString),
                description: 'The datetime the {{ database.name(entity) | singular }} was last updated.',
            },
{%-     for field in entity.get_fields() %}
{%-         if not (schema.is_auth_enabled() and entity.is_auth_role('owner') and field.is_auth_role('password')) %}
            {{ gql.field_label(field) }}: {
{%-             if field.auth_visibility() == 'visible' %}
                type: new GraphQLNonNull({{ gql.graphql_type(field.get_type()) }})
{%-             else %}
                type: {{ gql.graphql_type(field.get_type()) }}
{%-             endif %}
            },
{%-         endif %}
{%-     endfor %}
{%-     for reference in entity.get_references() %}
            {{ gql.field_label(reference) }}: {
                type: new GraphQLNonNull({{ gql.entity_type(reference.get_referenced()) }}),
                resolve: (...args) => resolver.{{ resolve.reference_for_entity(entity, reference) }}(...args)
            },
{%-     endfor %}
{%-     for union in entity.get_unions() %}
            {{ gql.field_label(union) }}: {
                type: new GraphQLNonNull({{ gql.union_type(entity, union) }}),
                resolve: (...args) => resolver.{{ resolve.union_for_entity(entity, union) }}(...args)
            },
{%-     endfor %}
{%-     for referrer in entity.get_referrers() %}

            {{ gql.referrer_label(referrer) }}: {
                type: {{ gql.entity_connection(referrer.get_entity()) }},
                args: {
                    first: {
                        description: 'limit',
                        type: GraphQLInt,
                    },
                    after: {
                        description: 'cursor',
                        type: cursorType,
                    },
                },
                resolve: (...args) => resolver.{{ resolve.referrer_for_entity(entity, referrer) }}(...args)
            },
{%-     endfor %}
{%-     for association in entity.get_associations() %}

            {{ gql.association_other_label(entity, association) }}: {
                type: {{ gql.entity_connection(association.get_other(entity)) }},
                args: {
                    first: {
                        description: 'limit',
                        type: GraphQLInt,
                    },
                    after: {
                        description: 'cursor',
                        type: cursorType,
                    },
                },
                resolve: (...args) => resolver.{{ resolve.association_for_entity(entity, association) }}(...args)
            },
{%-     endfor %}
        })
    });

{%-     for union in entity.get_unions() %}

    const {{ gql.add_union(entity, union) }} = new GraphQLInputObjectType({
        name: '{{ gql.add_union(entity, union) }}',
        description: 'input object to create {{ database.name(entity) | singular }} {{ database.name(union) | singular }} unions.',
        fields: () => ({
            id: {
                type: new GraphQLNonNull(GraphQLID)
            },
            type: {
                type: new GraphQLNonNull({{ gql.union_enum_type(entity, union) }})
            }
        })
    });
{%-     endfor %}

{%-     if not (entity.is_auth_role('owner') or entity.is_auth_role('token')) %}{# no add or delete on auth-controlled entities #}

    const {{ gql.add_entity(entity) }} = new GraphQLInputObjectType({
        name: '{{ gql.add_entity(entity) }}',
        description: 'input object to create a new {{ database.name(entity) | singular }}',
        fields: () => ({
{%-         for field in entity.get_fields() %}
            {{ gql.field_label(field) }}: {
                type: new GraphQLNonNull({{ gql.graphql_type(field.get_type()) }})
            },
{%-         endfor %}
{%-         for reference in entity.get_references() %}
{%-             if not reference.is_auth_role('owner') %}
            {{ gql.field_label(reference) }}: {
              type: new GraphQLNonNull(GraphQLID)
            },
{%-             endif %}
{%-         endfor %}
{%-         for union in entity.get_unions() %}
            {{ gql.field_label(union) }}: {
              type: new GraphQLNonNull({{ gql.add_union(entity, union) }})
            },
{%-         endfor %}
        }),
    });
{%-     endif %}

{%-     if not ((entity.is_auth_role('token') or entity.is_auth_role('owner')) and entity.has_only_auth_components()) %}

    const {{ gql.update_entity(entity) }} = new GraphQLInputObjectType({
        name: '{{ gql.update_entity(entity) }}',
        description: 'input object to update an existing {{ database.name(entity) | singular }}',
        fields: () => ({
{%-         for field in entity.get_fields() %}
{%-             if not (entity.is_auth_role('owner') and (field.is_auth_role('external-id') or field.is_auth_role('password'))) %}
            {{ gql.field_label(field) }}: {
                type: {{ gql.graphql_type(field.get_type()) }}
            },
{%-             endif %}
{%-         endfor %}
{%-         for reference in entity.get_references() %}
{%-             if not reference.is_auth_role('owner') %}
            {{ gql.field_label(reference) }}: {
              type: GraphQLID
            },
{%-             endif %}
{%-         endfor %}
{%-         for union in entity.get_unions() %}
            {{ gql.field_label(union) }}: {
              type: {{ gql.add_union(entity, union) }}
            },
{%-         endfor %}
        }),
    });
{%-     endif %}

{%- endfor %}

    const queryType = new GraphQLObjectType({
        name: 'Query',
        fields: () => ({

{%- for entity in schema.get_entities() %}

{%-    if entity.is_auth_role('owner') %}

            {{ gql.owner_entity() }}: {
                type: {{ gql.entity_type(entity) }},
                resolve: (...args) => resolver.{{ resolve.owner() }}(...args),
            },

{%-        for referrer in entity.get_referrers() %}

            {{ gql.owned_entity_label(referrer) }}: {
                type: {{ gql.entity_connection(referrer.get_entity()) }},
                args: {
                    first: {
                        description: 'limit',
                        type: GraphQLInt,
                    },
                    after: {
                        description: 'cursor',
                        type: cursorType,
                    },
                },
                resolve: (...args) => resolver.{{ resolve.owned_entities(referrer) }}(...args)
            },

{%-        endfor %}

{%-        for association in entity.get_associations() %}

            {{ gql.owned_association_other_label(entity, association) }}: {
                type: {{ gql.entity_connection(association.get_other(entity)) }},
                args: {
                    first: {
                        description: 'limit',
                        type: GraphQLInt,
                    },
                    after: {
                        description: 'cursor',
                        type: cursorType,
                    },
                },
                resolve: (...args) => resolver.{{ resolve.owned_association_for_entity(entity, association) }}(...args)
            },

{%-        endfor %}

{%-    endif %}

            {{ gql.singular_entity_label(entity) }}: {
                type: {{ gql.entity_type(entity) }},
                args: {
                    id: {
                        description: '{{ database.name(entity) | singular }} id',
                        type: new GraphQLNonNull(GraphQLID),
                    }
                },
                resolve: (...args) => resolver.{{ resolve.entity(entity) }}(...args),
            },
            {{ gql.plural_entity_label(entity) }}: {
                type: {{ gql.entity_connection(entity) }},
                args: {
                    first: {
                        description: 'limit',
                        type: GraphQLInt,
                    },
                    after: {
                        description: 'cursor',
                        type: cursorType,
                    },
                },
                resolve: (...args) => resolver.{{ resolve.entities(entity) }}(...args),
            },
{%- endfor %}
        })
    });

    const mutationType = new GraphQLObjectType({
        name: 'Mutation',
        fields: () => ({
{%- for entity in schema.get_entities() %}
{%-   if not (entity.is_auth_role('token') or entity.is_auth_role('owner')) %}
            {{ gql.add_entity_label(entity) }}: {
                type: {{ gql.entity_type(entity) }},
                args: {
                    input: {
                        type: new GraphQLNonNull({{ gql.add_entity(entity) }})
                    }
                },
                resolve: (...args) => resolver.{{ resolve.create_entity(entity) }}(...args),
            },
{%-     endif %}

{%-     if not ((entity.is_auth_role('token') or entity.is_auth_role('owner')) and entity.has_only_auth_components()) %}
            {{ gql.update_entity_label(entity) }}: {
                type: {{ gql.entity_type(entity) }},
                args: {
                    id: {
                         type: new GraphQLNonNull(GraphQLID)
                    },
                    input: {
                        type: new GraphQLNonNull({{ gql.update_entity(entity) }})
                    }
                },
                resolve: (...args) => resolver.{{ resolve.update_entity(entity) }}(...args),
            },
{%-     endif %}

{%-     if not (entity.is_auth_role('owner') or entity.is_auth_role('token')) %}
            {{ gql.delete_entity_label(entity) }}: {
                type: statusType,
                args: {
                    id: {
                         type: new GraphQLNonNull(GraphQLID)
                    },
                },
                resolve: (...args) => resolver.{{ resolve.delete_entity(entity) }}(...args)
            },
{%-     endif %}
{%- endfor %}

{%- for association in schema.get_associations() %}
            {{ gql.add_association_label(association) }}: {
                type: statusType,
                args: {
                    {{ gql.association_lhs_label(association) }}: {
                        type: new GraphQLNonNull(GraphQLID)
                    },
                    {{ gql.association_rhs_label(association) }}: {
                        type: new GraphQLNonNull(GraphQLID)
                    },
                },
                resolve: (...args) => resolver.{{ resolve.create_association(association) }}(...args)
            },
{%-     for lhs in association.get_lhs().get_unique_fields() %}
// add association {{lhs.get_name()}}.{{association.get_name()}}.id
            {{ gql.add_association_label_lhs(association, lhs) }}: {
                type: statusType,
                args: {
                    {{ gql.association_lhs_field_label(association, lhs) }}: {
                        type: new GraphQLNonNull({{ gql.graphql_type(lhs.get_type()) }})
                    },
                    {{ gql.association_rhs_label(association) }}: {
                        type: new GraphQLNonNull(GraphQLID)
                    },
                },
                resolve: (...args) => resolver.{{ resolve.create_association_lhs(association, lhs) }}(...args)
            },
{%-         for rhs in association.get_rhs().get_unique_fields() %}
// add association {{lhs.get_name()}}.{{association.get_name()}}.{{rhs.get_name()}}
           {{ gql.add_association_label_lhs_rhs(association, lhs, rhs) }}: {
                type: statusType,
                args: {
                    {{ gql.association_lhs_field_label(association, lhs) }}: {
                        type: new GraphQLNonNull({{ gql.graphql_type(lhs.get_type()) }})
                    },
                    {{ gql.association_rhs_field_label(association, rhs) }}: {
                        type: new GraphQLNonNull({{ gql.graphql_type(rhs.get_type()) }})
                    },
                },
                resolve: (...args) => resolver.{{ resolve.create_association_lhs_rhs(association, lhs, rhs) }}(...args)
            },
// add association id.{{association.get_name()}}.{{rhs.get_name()}}
            {{ gql.add_association_label_rhs(association, rhs) }}: {
                type: statusType,
                args: {
                    {{ gql.association_lhs_label(association) }}: {
                        type: new GraphQLNonNull(GraphQLID)
                    },
                    {{ gql.association_rhs_field_label(association, rhs) }}: {
                        type: new GraphQLNonNull({{ gql.graphql_type(rhs.get_type()) }})
                    },
                },
                resolve: (...args) => resolver.{{ resolve.create_association_rhs(association, rhs) }}(...args)
            },
{%-         endfor %}
{%-     else %}
{%-         for rhs in association.get_rhs().get_unique_fields() %}
// add association id.{{association.get_name()}}.{{rhs.get_name()}}
            {{ gql.add_association_label_rhs(association, rhs) }}: {
                type: statusType,
                args: {
                    {{ gql.association_lhs_label(association) }}: {
                        type: new GraphQLNonNull(GraphQLID)
                    },
                    {{ gql.association_rhs_field_label(association, rhs) }}: {
                        type: new GraphQLNonNull({{ gql.graphql_type(rhs.get_type()) }})
                    },
                },
                resolve: (...args) => resolver.{{ resolve.create_association_rhs(association, rhs) }}(...args)
            },
{%-         endfor %}
{%-     endfor %}
            {{ gql.delete_association_label(association) }}: {
                type: statusType,
                args: {
                    {{ gql.association_lhs_label(association) }}: {
                        type: new GraphQLNonNull(GraphQLID)
                    },
                    {{ gql.association_rhs_label(association) }}: {
                        type: new GraphQLNonNull(GraphQLID)
                    },
                },
                resolve: (...args) => resolver.{{ resolve.delete_association(association) }}(...args)
            },
{%- endfor %}
        })
    });

    const schema = new GraphQLSchema({
        query: queryType,
        mutation: mutationType
    });
    // logger.debug(printSchema(schema));
    return schema;

};

module.exports = make_schema;