{#
 #  MetaData - API Generator.
 #  Copyright (C) 2022  Bill Hails
 #
 #  This program is free software: you can redistribute it and/or modify
 #  it under the terms of the GNU General Public License as published by
 #  the Free Software Foundation, either version 3 of the License, or
 #  (at your option) any later version.
 #
 #  This program is distributed in the hope that it will be useful,
 #  but WITHOUT ANY WARRANTY; without even the implied warranty of
 #  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 #  GNU General Public License for more details.
 #
 #  You should have received a copy of the GNU General Public License
 #  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 -#}
// {{ warning }}

{%- import 'macros/resolver.j2h' as resolve %}
{%- import 'macros/schema.j2h' as arguments %}
{%- import 'macros/model.j2h' as model %}
{%- import 'macros/database.j2h' as database %}

const {
    GraphQLEnumType,
    GraphQLInterfaceType,
    GraphQLList,
    GraphQLNonNull,
    GraphQLObjectType,
    GraphQLUnionType,
    GraphQLInputObjectType,
} = require('graphql/type/definition');
const { GraphQLInt, GraphQLBoolean } = require('graphql/type');
const { GraphQLString, GraphQLID } = require('graphql/type/scalars');
const { GraphQLSchema } = require('graphql/type/schema');
const { printSchema } = require('graphql/utilities');
const logger = require('../Utils/logger');
const Model = require('../Model');

const make_schema = (resolver) => {
    const statusType = new GraphQLObjectType ({
        name: 'status',
        fields: {
            status: {
                type: new GraphQLNonNull(GraphQLBoolean)
            }
        },
    });

{%- for entity in schema.get_entities() %}

{%-     for union in entity.get_unions() %}

    const {{ arguments.union_enum_type(entity, union) }} = new GraphQLEnumType({
        name: '{{ arguments.union_enum_type(entity, union) }}',
        values: {
{%-         for reference in union.get_references() %}
            {{ arguments.field_label(reference) }}: { value: '{{ database.name(reference) }}' },
{%-         endfor %}
        }
    });

    const {{ arguments.union_type(entity, union) }} = new GraphQLUnionType({
        name: '{{ arguments.union_type(entity, union) }}',
        types: () => ([
{%-         for reference in union.get_references() %}{{ arguments.entity_type(reference.get_referenced()) }}, {% endfor -%}
        ]),
        resolveType(value) {
{%-         for reference in union.get_references() %}
            if (value instanceof Model.{{ model.name(reference.get_referenced()) }}) {
                return {{ arguments.entity_type(reference.get_referenced()) }};
            }
{%-         endfor %}
        }
    });
{%-     endfor %}

    const {{ arguments.entity_type(entity) }} = new GraphQLObjectType ({
        name: '{{ arguments.entity_type(entity) }}',
        description: '{{ entity.get_description() }}',
        fields: () => ({
            id: {
                type: new GraphQLNonNull(GraphQLID),
                description: '{{ database.name(entity) }} id.',
            },
{%-     for field in entity.get_fields() %}
{%-         if not (schema.is_auth_enabled() and entity.is_auth_role('owner') and field.is_auth_role('password')) %}
            {{ arguments.field_label(field) }}: {
                type: new GraphQLNonNull({{ arguments.graphql_type(field.get_type()) }})
            },
{%-         endif %}
{%-     endfor %}
{%-     for reference in entity.get_references() %}
            {{ arguments.field_label(reference) }}: {
                type: new GraphQLNonNull({{ arguments.entity_type(reference.get_referenced()) }}),
                resolve: (source, args, req) => resolver.{{ resolve.reference_for_entity(entity, reference) }}(source, args, req)
            },
{%-     endfor %}
{%-     for union in entity.get_unions() %}
            {{ arguments.field_label(union) }}: {
                type: new GraphQLNonNull({{ arguments.union_type(entity, union) }}),
                resolve: (source, args, req) => resolver.{{ resolve.union_for_entity(entity, union) }}(source, args, req)
            },
{%-     endfor %}
{%-     for referrer in entity.get_referrers() %}
            {{ arguments.referrer_label(referrer) }}: {
                type: new GraphQLList({{ arguments.entity_type(referrer.get_entity()) }}),
                args: {
                    take: {
                        description: 'limit',
                        type: GraphQLInt,
                    },
                    skip: {
                        description: 'offset',
                        type: GraphQLInt,
                    },
                },
                resolve: (source, args, req) => resolver.{{ resolve.referrer_for_entity(entity, referrer) }}(source, args, req)
            },
{%-     endfor %}
{%-     for association in entity.get_associations() %}
            {{ arguments.association_other_label(entity, association) }}: {
                type: new GraphQLList({{ arguments.entity_type(association.get_other(entity)) }}),
                args: {
                    take: {
                        description: 'limit',
                        type: GraphQLInt,
                    },
                    skip: {
                        description: 'offset',
                        type: GraphQLInt,
                    },
                },
                resolve: (source, args, req) => resolver.{{ resolve.association_for_entity(entity, association) }}(source, args, req)
            },
{%-     endfor %}
        })
    });

{%-     for union in entity.get_unions() %}

    const {{ arguments.add_union(entity, union) }} = new GraphQLInputObjectType({
        name: '{{ arguments.add_union(entity, union) }}',
        description: 'input object to create {{ database.name(entity) | singular }} {{ database.name(union) | singular }} unions.',
        fields: () => ({
            id: {
                type: new GraphQLNonNull(GraphQLID)
            },
            type: {
                type: new GraphQLNonNull({{ arguments.union_enum_type(entity, union) }})
            }
        })
    });
{%-     endfor %}

{%-     if not (entity.is_auth_role('owner') or entity.is_auth_role('token')) %}{# no add or delete on auth-controlled entities #}

    const {{ arguments.add_entity(entity) }} = new GraphQLInputObjectType({
        name: '{{ arguments.add_entity(entity) }}',
        description: 'input object to create a new {{ database.name(entity) | singular }}',
        fields: () => ({
{%-         for field in entity.get_fields() %}
            {{ arguments.field_label(field) }}: {
                type: new GraphQLNonNull({{ arguments.graphql_type(field.get_type()) }})
            },
{%-         endfor %}
{%-         for reference in entity.get_references() %}
{%-             if not reference.is_auth_role('owner') %}
            {{ arguments.field_label(reference) }}: {
              type: new GraphQLNonNull(GraphQLID)
            },
{%-             endif %}
{%-         endfor %}
{%-     for union in entity.get_unions() %}
            {{ arguments.field_label(union) }}: {
              type: new GraphQLNonNull({{ arguments.add_union(entity, union) }})
            },
{%-         endfor %}
        }),
    });
{%-     endif %}

{%-     if not ((entity.is_auth_role('token') or entity.is_auth_role('owner')) and entity.has_only_auth_components()) %}

    const {{ arguments.update_entity(entity) }} = new GraphQLInputObjectType({
        name: '{{ arguments.update_entity(entity) }}',
        description: 'input object to update an existing {{ database.name(entity) | singular }}',
        fields: () => ({
{%-         for field in entity.get_fields() %}
{%-             if not (entity.is_auth_role('owner') and (field.is_auth_role('external-id') or field.is_auth_role('password'))) %}
            {{ arguments.field_label(field) }}: {
                type: {{ arguments.graphql_type(field.get_type()) }}
            },
{%-             endif %}
{%-         endfor %}
{%-         for reference in entity.get_references() %}
{%-             if not reference.is_auth_role('owner') %}
            {{ arguments.field_label(reference) }}: {
              type: GraphQLID
            },
{%-             endif %}
{%-         endfor %}
{%-         for union in entity.get_unions() %}
            {{ arguments.field_label(union) }}: {
              type: {{ arguments.add_union(entity, union) }}
            },
{%-         endfor %}
        }),
    });
{%-     endif %}

{%- endfor %}

    const queryType = new GraphQLObjectType({
        name: 'Query',
        fields: () => ({
{%- for entity in schema.get_entities() %}
            {{ arguments.singular_entity_label(entity) }}: {
                type: {{ arguments.entity_type(entity) }},
                args: {
                    id: {
                        description: '{{ database.name(entity) | singular }} id',
                        type: new GraphQLNonNull(GraphQLID),
                    }
                },
                resolve: (source, args, req) => resolver.{{ resolve.entity(entity) }}(source, args, req),
            },
            {{ arguments.plural_entity_label(entity) }}: {
                type: new GraphQLList({{ arguments.entity_type(entity) }}),
                args: {
                    take: {
                        description: 'limit',
                        type: GraphQLInt,
                    },
                    skip: {
                        description: 'offset',
                        type: GraphQLInt,
                    },
                },
                resolve: (source, args, req) => resolver.{{ resolve.entities(entity) }}(source, args, req),
            },
{%- endfor %}
        })
    });

    const mutationType = new GraphQLObjectType({
        name: 'Mutation',
        fields: () => ({
{%- for entity in schema.get_entities() %}
{%-   if not (entity.is_auth_role('token') or entity.is_auth_role('owner')) %}
            {{ arguments.add_entity_label(entity) }}: {
                type: {{ arguments.entity_type(entity) }},
                args: {
                    input: {
                        type: new GraphQLNonNull({{ arguments.add_entity(entity) }})
                    }
                },
                resolve: (source, args, req) => resolver.{{ resolve.create_entity(entity) }}(source, args, req),
            },
{%-     endif %}

{%-     if not ((entity.is_auth_role('token') or entity.is_auth_role('owner')) and entity.has_only_auth_components()) %}
            {{ arguments.update_entity_label(entity) }}: {
                type: {{ arguments.entity_type(entity) }},
                args: {
                    id: {
                         type: new GraphQLNonNull(GraphQLID)
                    },
                    input: {
                        type: new GraphQLNonNull({{ arguments.update_entity(entity) }})
                    }
                },
                resolve: (source, args, req) => resolver.{{ resolve.update_entity(entity) }}(source, args, req),
            },
{%-     endif %}

{%-     if not (entity.is_auth_role('owner') or entity.is_auth_role('token')) %}
            {{ arguments.delete_entity_label(entity) }}: {
                type: statusType,
                args: {
                    id: {
                         type: new GraphQLNonNull(GraphQLID)
                    },
                },
                resolve: (source, args, req) => resolver.{{ resolve.delete_entity(entity) }}(source, args, req)
            },
{%-     endif %}
{%- endfor %}

{%- for association in schema.get_associations() %}
            {{ arguments.add_association_label(association) }}: {
                type: statusType,
                args: {
                    {{ arguments.association_lhs_label(association) }}: {
                        type: new GraphQLNonNull(GraphQLID)
                    },
                    {{ arguments.association_rhs_label(association) }}: {
                        type: new GraphQLNonNull(GraphQLID)
                    },
                },
                resolve: (source, args, req) => resolver.{{ resolve.create_association(association) }}(source, args, req)
            },
            {{ arguments.delete_association_label(association) }}: {
                type: statusType,
                args: {
                    {{ arguments.association_lhs_label(association) }}: {
                        type: new GraphQLNonNull(GraphQLID)
                    },
                    {{ arguments.association_rhs_label(association) }}: {
                        type: new GraphQLNonNull(GraphQLID)
                    },
                },
                resolve: (source, args, req) => resolver.{{ resolve.delete_association(association) }}(source, args, req)
            },
{%- endfor %}
        })
    });

    const schema = new GraphQLSchema({
        query: queryType,
        mutation: mutationType
    });
    // logger.debug(printSchema(schema));
    return schema;

};

module.exports = make_schema;