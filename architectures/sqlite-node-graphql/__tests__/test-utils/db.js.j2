{#
 #  MetaData - API Generator.
 #  Copyright (C) 2022  Bill Hails
 #
 #  This program is free software: you can redistribute it and/or modify
 #  it under the terms of the GNU General Public License as published by
 #  the Free Software Foundation, either version 3 of the License, or
 #  (at your option) any later version.
 #
 #  This program is distributed in the hope that it will be useful,
 #  but WITHOUT ANY WARRANTY; without even the implied warranty of
 #  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 #  GNU General Public License for more details.
 #
 #  You should have received a copy of the GNU General Public License
 #  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 #}
// {{ warning }}
{%- if schema.is_auth_enabled() %}

{%- import 'macros/data.j2h' as data %}
{%- import 'macros/gql.j2h' as gql %}

const sqlite3 = require('sqlite3').verbose();
const { open: openSqlite } = require('sqlite');
const Data = require('../../DB/data');

const getDb = () => {
    return Data.build(); // build does it's own memoization
};

async function refreshTokenExists(token) {
    const db = await getDb();
    const row = await db.get(`
        SELECT count(*) AS c
          FROM refresh_tokens
         WHERE token = ?
        `,
        [token]
    );
    return(parseInt(row.c) == 1);
}

{%- set roles_entity = schema.get_auth_role_entity() %}
{%- set roles_field = roles_entity.get_auth_field('role') %}

async function getAdminRole() {
    const db = await getDb();
    const adminRole = await db.{{ data.get_entity_by_field(roles_entity, roles_field) }}('admin');
    if (!adminRole) {
        return db.{{ data.create_entity(roles_entity) }}({ {{gql.field_label(roles_field)}}: "admin" });
    }
    return adminRole;
}

{%- set roles_association = schema.get_auth_role_association() %}

async function grantAdminRole(userId) {
    const db = await getDb();
    const adminRole = await getAdminRole();
    return db.{{ data.create_association(roles_association) }}({
        '{{ gql.association_lhs_label(roles_association) }}': userId,
        '{{ gql.association_rhs_label(roles_association) }}': adminRole.id
    });
}

module.exports = {
    getDb,
    refreshTokenExists,
    getAdminRole,
    grantAdminRole
};

{% else %}
// schema.auth-enabled is false, no code generated
module.exports = {};
{% endif %}