{#
 #  MetaData - API Generator.
 #  Copyright (C) 2022  Bill Hails
 #
 #  This program is free software: you can redistribute it and/or modify
 #  it under the terms of the GNU General Public License as published by
 #  the Free Software Foundation, either version 3 of the License, or
 #  (at your option) any later version.
 #
 #  This program is distributed in the hope that it will be useful,
 #  but WITHOUT ANY WARRANTY; without even the implied warranty of
 #  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 #  GNU General Public License for more details.
 #
 #  You should have received a copy of the GNU General Public License
 #  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 #}
// {{ warning }}
{%- if schema.is_auth_enabled() %}
{%-     import 'macros/gql.j2h' as gql %}
{%-     set owner_entity = schema.get_auth_owner_entity() %}
{%-     set password_field = owner_entity.get_auth_password_field() %}
{%-     set id_field = owner_entity.get_auth_id_field() %}
{%-     set password_label = gql.field_label(password_field) %}
{%-     set id_label = gql.field_label(id_field) %}

const { faker } = require('@faker-js/faker');

{%- macro faker_type(field) %}faker.
{%- if field.get_type() == 'email' %}internet.email
{%- elif field.get_type() == 'password' %}internet.password
{%- elif field.get_type() == 'name' %}internet.userName
{%- else %}lorem.paragraph
{%- endif %}
{%- endmacro %}

function randomUser() {
{%- if id_field.get_type() == 'email' and owner_entity.get_field_with_type('name') %}
    const firstName = faker.name.firstName();
    const lastName = faker.name.lastName();
{%-     set name_field_generator %}faker.internet.userName(firstName, lastName){% endset %}
{%-     set id_generator %}faker.internet.email(firstName, lastName){% endset %}
{%- else %}
{%-     set id_generator %}{{ faker_type(id_field) }}(){% endset %}
{%-     set name_field_generator %}faker.internet.useName(){% endset %}
{%- endif %}
    return {
        {{ id_label }}: {{ id_generator }},
        {{ password_label }}: {{ faker_type(password_field) }}(),
{%-     for field in schema.get_auth_owner_entity().get_fields() if not (field.is_auth_role('external-id') or field.is_auth_role('password')) %}
{%-         if field.get_type() == 'name' %}
        {{ gql.field_label(field) }}: {{ name_field_generator }}
{%-         else %}
        {{ gql.field_label(field) }}: {{ faker_type(field) }}(),
{%-         endif %}
{%-     endfor %}
    };
}

module.exports = {
    faker,
    randomUser
};

{% else %}
module.exports = {
    faker,
    randomUser
};
{% endif %}
