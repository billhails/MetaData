{#
 #  MetaData - API Generator.
 #  Copyright (C) 2022  Bill Hails
 #
 #  This program is free software: you can redistribute it and/or modify
 #  it under the terms of the GNU General Public License as published by
 #  the Free Software Foundation, either version 3 of the License, or
 #  (at your option) any later version.
 #
 #  This program is distributed in the hope that it will be useful,
 #  but WITHOUT ANY WARRANTY; without even the implied warranty of
 #  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 #  GNU General Public License for more details.
 #
 #  You should have received a copy of the GNU General Public License
 #  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 #}
// {{ warning }}
{%- import 'macros/schema.j2h' as arguments %}

const { signup, deconstruct } = require('../test-utils/auth');
const { faker, randomUser } = require('../test-utils/fakery');
const { getGraphQLClient } = require('../test-utils/graphql')
const { GraphQLClient, gql } = require('graphql-request');
const jwt = require('jsonwebtoken');

{% if schema.is_auth_enabled %}
{%-     set owner_entity = schema.get_auth_owner_entity() %}
{%-     set owner_label = arguments.singular_entity_label(owner_entity) %}

{%-     set id_field = owner_entity.get_auth_id_field() %}
{%-     set id_label = arguments.field_label(id_field) %}

{%-     set token_entity = schema.get_auth_token_entity() %}
{%-     set token_entity_label = arguments.field_label(token_entity) %}
{%-     set token_entity_name = arguments.singular_entity_label(token_entity) %}

{%-     set owner_token_name = arguments.referrer_label(token_entity.get_auth_owner_reference()) %}
{%-     set token_field_label = arguments.field_label(token_entity.get_auth_token_field()) %}
function userQuery(id) {
    return gql`
        {
            {{ owner_label }}(id: "${id}") {
                {{ owner_token_name }} {
                    edges {
                        node {
                            id
                            {{ token_field_label }}
                        }
                    }
                }
            }
        }`;
}

function tokenQuery(id) {
    return gql`
        {
            {{ token_entity_name }}(id: "${id}") {
                {{ token_field_label }}
            }
        }`;
}

async function createUser() {
    const user = randomUser();
    const response = await signup(user);
    return deconstruct(response);
}

describe("{{ token_entity_label }}", () => {
    it("is correctly configured", () => {
{%-      if token_entity.is_auth_visibility('hidden') %}
        expect(1).toBe(1);
{%-      else %}
        fail("{{ token_entity_label }} does not have auth-visibility=hidden");
{%-      endif %}
    });
    it("is visible to its owner", async () => {
        expect.assertions(1);
        const { accessToken, refreshToken, id } = await createUser();
        const graphQLClient = getGraphQLClient(accessToken);
        const query = userQuery(id);
        const data = await graphQLClient.request(query);
        expect(data.{{ owner_label }}?.{{ owner_token_name }}?.edges?.[0]?.node?.{{ token_field_label }}).toBe(refreshToken);
    });
    it("is fetchable directly by its owner", async () => {
        expect.assertions(1);
        const { accessToken, refreshToken, id } = await createUser();
        const graphQLClient = getGraphQLClient(accessToken);
        const query = userQuery(id);
        const data = await graphQLClient.request(query);
        const tokenId = data.{{ owner_label }}?.{{ owner_token_name }}?.edges?.[0]?.node?.id;
        const query2 = tokenQuery(tokenId);
        const data2 = await graphQLClient.request(query2);
        expect(data2.{{ token_entity_name }}?.{{ token_field_label }}).toBe(refreshToken);
    });
    it("is not fetchable directly by a logged-out user", async () => {
        expect.assertions(1);
        const { accessToken, refreshToken, id } = await createUser();
        const graphQLClient = getGraphQLClient(accessToken);
        const query = userQuery(id);
        const data = await graphQLClient.request(query);
        const tokenId = data.{{ owner_label }}?.{{ owner_token_name }}?.[0]?.id;
        const query2 = tokenQuery(tokenId);
        const loggedOutGraphQLClient = getGraphQLClient();
        const data2 = await loggedOutGraphQLClient.request(query2);
        expect(data2.{{ token_entity_name }}).toBe(null);
    });
    it("is not fetchable directly by another user", async () => {
        expect.assertions(1);
        const { accessToken, refreshToken, id } = await createUser();
        const graphQLClient = getGraphQLClient(accessToken);
        const query = userQuery(id);
        const data = await graphQLClient.request(query);
        const tokenId = data.{{ owner_label }}?.{{ owner_token_name }}?.edges?.[0]?.node?.id;
        const { accessToken: accessToken2 } = await createUser();
        const query2 = tokenQuery(tokenId);
        const graphQLClient2 = getGraphQLClient(accessToken2);
        const data2 = await graphQLClient2.request(query2);
        expect(data2.{{ token_entity_name }}).toBe(null);
    });
    it("is invisible to a logged out user", async () => {
        expect.assertions(1);
        const { id } = await createUser();
        const graphQLClient = getGraphQLClient();
        const query = userQuery(id);
        const data = await graphQLClient.request(query);
        expect(data.{{ owner_label }}?.{{ owner_token_name }}.edges).toStrictEqual([{node: null}]);
    });
    it("is invisible to a different user", async () => {
        expect.assertions(1);
        const { id } = await createUser();
        const { accessToken } = await createUser();
        const graphQLClient = getGraphQLClient(accessToken);
        const query = userQuery(id);
        const data = await graphQLClient.request(query);
        expect(data.{{ owner_label }}?.{{ owner_token_name }}?.edges).toStrictEqual([{node: null}]);
    });
});
{%- else %}
test("stub", () => expect(1).toBe(1));
{% endif %}
