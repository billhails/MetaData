{#-
 #  MetaData - API Generator.
 #  Copyright (C) 2022-2023  Bill Hails
 #
 #  This program is free software: you can redistribute it and/or modify
 #  it under the terms of the GNU General Public License as published by
 #  the Free Software Foundation, either version 3 of the License, or
 #  (at your option) any later version.
 #
 #  This program is distributed in the hope that it will be useful,
 #  but WITHOUT ANY WARRANTY; without even the implied warranty of
 #  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 #  GNU General Public License for more details.
 #
 #  You should have received a copy of the GNU General Public License
 #  along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#}
// {{ warning }}
{#- example test included by using the --extra override #}

jest.mock('../../Utils/logger');

const { getGraphQLClient } = require('../test-utils/graphql');
const { getLoggedInUser, getAdminUser } = require('../test-utils/users');
const {
    updatePostMutation,
    updatePost,
    deletePost,
    ensureCategoriesExist,
    createPost,
    createCategoryPost,
    fetchPost
} = require('../test-utils/posts');


describe("posts", () => {
    it("cannot be created by a logged-out user", async () => {
        expect.assertions(1);
        const loggedOut = getGraphQLClient();
        const data = await createPost(loggedOut);
        expect(data).toStrictEqual({addPost: null});
    });
    it("can be created by a logged-in user", async () => {
        expect.assertions(2);
        const { loggedIn, id } = await getLoggedInUser();
        const data = await createPost(loggedIn);
        expect(data.addPost).not.toBeNull();
        expect(data.addPost?.owner?.id).toBe(id);
    });
    it("can be created by admin", async () => {
        expect.assertions(2);
        const { loggedIn: admin, id } = await getAdminUser();
        const data = await createPost(admin);
        expect(data.addPost).not.toBeNull();
        expect(data.addPost?.owner?.id).toBe(id);
    });
    it("can be modified by the owner", async () => {
        expect.assertions(2);
        const { loggedIn, id } = await getLoggedInUser();
        const data = await createPost(loggedIn);
        const update = updatePostMutation(data.addPost.id)
        const updatedData = await loggedIn.request(update.mutation, update.variables);
        expect(updatedData.updatePost.body).toBe(update.variables.body);
        expect(updatedData.updatePost.owner.id).toBe(id);
    });
    it("can be modified by admin", async () => {
        expect.assertions(2);
        const { loggedIn, id } = await getLoggedInUser();
        const data = await createPost(loggedIn);
        const { loggedIn: admin } = await getAdminUser();
        const update = updatePostMutation(data.addPost.id);
        const updatedData = await admin.request(update.mutation, update.variables);
        expect(updatedData.updatePost.body).toBe(update.variables.body);
        expect(updatedData.updatePost.owner.id).toBe(id);
    });
    it("can not be modified by a logged-out user", async () => {
        expect.assertions(1);
        const { loggedIn } = await getLoggedInUser();
        const data = await createPost(loggedIn);
        const loggedOut = getGraphQLClient();
        const updatedData = await updatePost(loggedOut, data.addPost.id);
        expect(updatedData.updatePost).toBeNull();
    });
    it("can not be modified by a different user", async () => {
        expect.assertions(1);
        const { loggedIn } = await getLoggedInUser();
        const data = await createPost(loggedIn);
        const { loggedIn: otherUser } = await getLoggedInUser();
        const updatedData = await updatePost(otherUser, data.addPost.id);
        expect(updatedData.updatePost).toBeNull();
    });
    it("can be deleted by the owner", async () => {
        expect.assertions(1);
        const { loggedIn } = await getLoggedInUser();
        const data = await createPost(loggedIn);
        const deletedData = await deletePost(loggedIn, data.addPost.id);
        expect(deletedData).toStrictEqual({deletePost: { status: true }})
    });
    it("can be deleted by admin", async () => {
        expect.assertions(1);
        const { loggedIn } = await getLoggedInUser();
        const data = await createPost(loggedIn);
        const { loggedIn: admin } = await getAdminUser();
        const deletedData = await deletePost(admin, data.addPost.id);
        expect(deletedData).toStrictEqual({deletePost: { status: true }})
    });
    it("can not be deleted by a logged-out user", async () => {
        expect.assertions(1);
        const { loggedIn } = await getLoggedInUser();
        const data = await createPost(loggedIn);
        const loggedOut = getGraphQLClient();
        const deletedData = await deletePost(loggedOut, data.addPost.id);
        expect(deletedData).toStrictEqual({deletePost: { status: false }})
    });
    it("can not be deleted by a different user", async () => {
        expect.assertions(1);
        const { loggedIn } = await getLoggedInUser();
        const data = await createPost(loggedIn);
        const { loggedIn: otherUser } = await getLoggedInUser();
        const deletedData = await deletePost(otherUser, data.addPost.id);
        expect(deletedData).toStrictEqual({deletePost: { status: false }});
    });
    it("can be associated with categories", async () => {
        expect.assertions(3);
        const { loggedIn } = await getLoggedInUser();
        const { loggedIn: admin } = await getAdminUser();
        const postData = await createPost(loggedIn);
        const categoryData = await ensureCategoriesExist(admin);
        expect(categoryData.categories.totalCount).toBeGreaterThanOrEqual(3);
        const assocResult = await createCategoryPost(loggedIn, categoryData.categories.edges[0].node.id, postData.addPost.id);
        expect(assocResult.addPostsCategoryAssociation.status).toBe(true);
        const fetchPostResult = await fetchPost(loggedIn, postData.addPost.id);
        expect(fetchPostResult.post.categories.edges[0].node.id).toBe(categoryData.categories.edges[0].node.id);
    });
    it("defends against XSS attacks", async () => {
        expect.assertions(1);
        const { loggedIn } = await getLoggedInUser();
        const postData = await createPost(loggedIn, {body: "<script>your XSS here</script>"});
        expect(postData.addPost.body).toBe("&lt;script&gt;your XSS here&lt;/script&gt;");
    });
});